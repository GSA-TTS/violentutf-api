"""Vulnerability taxonomy model for classification and standardization."""

from datetime import datetime, timezone
from typing import TYPE_CHECKING, Any, List, Optional, Tuple, Union

from sqlalchemy import Boolean, DateTime, Float, Index, String, Text
from sqlalchemy.orm import Mapped, Session, declared_attr, mapped_column, relationship

from app.core.enums import AttackVector, MITREATLASTactic, OWASPLLMCategory, Severity, VulnerabilityCategory
from app.db.base_class import Base
from app.models.mixins import AuditMixin, SoftDeleteMixin

if TYPE_CHECKING:
    from app.models.vulnerability_finding import VulnerabilityFinding


class VulnerabilityTaxonomy(Base, AuditMixin, SoftDeleteMixin):
    """
    Vulnerability taxonomy for standardized vulnerability classification.

    This model defines the authoritative classification system for vulnerabilities,
    mapping to industry standards including CWE, CVE, OWASP LLM Top 10, and MITRE ATLAS.
    """

    __tablename__ = "vulnerability_taxonomies"

    # Basic Classification
    name: Mapped[str] = mapped_column(String(200), nullable=False, index=True)
    category: Mapped[VulnerabilityCategory] = mapped_column(nullable=False, index=True)
    description: Mapped[Optional[str]] = mapped_column(Text, nullable=True)

    # Industry Standard Mappings
    cwe_id: Mapped[Optional[str]] = mapped_column(String(20), nullable=True, index=True)  # CWE-79, CWE-89
    cve_id: Mapped[Optional[str]] = mapped_column(String(20), nullable=True, index=True)  # CVE-2023-1234
    owasp_id: Mapped[Optional[OWASPLLMCategory]] = mapped_column(nullable=True, index=True)
    atlas_technique: Mapped[Optional[str]] = mapped_column(String(20), nullable=True, index=True)  # AML.T0043
    atlas_tactic: Mapped[Optional[MITREATLASTactic]] = mapped_column(nullable=True, index=True)

    # AI/ML Specific Attributes
    is_ai_specific: Mapped[bool] = mapped_column(Boolean, default=False, index=True)
    attack_vector: Mapped[AttackVector] = mapped_column(nullable=False, index=True)
    ai_model_types: Mapped[Optional[str]] = mapped_column(Text, nullable=True)  # JSON array of affected model types

    # Risk Assessment Parameters
    base_severity: Mapped[Severity] = mapped_column(nullable=False, index=True)
    exploitability_score: Mapped[float] = mapped_column(Float, nullable=False, default=0.0)  # 0.0-10.0
    impact_score: Mapped[float] = mapped_column(Float, nullable=False, default=0.0)  # 0.0-10.0
    base_cvss_score: Mapped[Optional[float]] = mapped_column(Float, nullable=True)  # 0.0-10.0

    # Detection and Remediation Guidance
    detection_methods: Mapped[Optional[str]] = mapped_column(Text, nullable=True)  # JSON array
    remediation_guidance: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    prevention_measures: Mapped[Optional[str]] = mapped_column(Text, nullable=True)

    # Metadata
    reference_urls: Mapped[Optional[str]] = mapped_column(Text, nullable=True)  # JSON array of reference URLs
    tags: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)  # Comma-separated tags
    is_active: Mapped[bool] = mapped_column(Boolean, default=True, index=True)

    # Relationships
    vulnerability_findings: Mapped[List["VulnerabilityFinding"]] = relationship(
        "VulnerabilityFinding", back_populates="taxonomy", lazy="dynamic"
    )

    # Indexes for performance
    @declared_attr
    @classmethod
    def __table_args__(cls) -> Any:
        """Define table-specific indexes in addition to mixin indexes."""
        return (
            Index("idx_taxonomy_category_severity", "category", "base_severity"),
            Index("idx_taxonomy_ai_specific", "is_ai_specific", "category"),
            Index("idx_taxonomy_owasp_atlas", "owasp_id", "atlas_technique"),
            Index("idx_taxonomy_active_lookup", "is_active", "category", "base_severity"),
        )

    def __repr__(self) -> str:
        """Return string representation of VulnerabilityTaxonomy."""
        return (
            f"<VulnerabilityTaxonomy(name='{self.name}', category='{self.category}', severity='{self.base_severity}')>"
        )

    @property
    def display_name(self) -> str:
        """Human-readable display name with classification."""
        classification = ""
        if self.owasp_id:
            classification = f" ({self.owasp_id})"
        elif self.cwe_id:
            classification = f" ({self.cwe_id})"
        elif self.atlas_technique:
            classification = f" ({self.atlas_technique})"

        return f"{self.name}{classification}"

    @property
    def is_critical_ai_vulnerability(self) -> bool:
        """Check if this is a critical AI-specific vulnerability."""
        return (
            self.is_ai_specific
            and self.base_severity in [Severity.CRITICAL, Severity.HIGH]
            and self.owasp_id is not None
        )

    @property
    def cvss_vector_string(self) -> Optional[str]:
        """Generate CVSS vector string if base score is available."""
        if self.base_cvss_score is None:
            return None

        # Simplified CVSS vector - in real implementation would need more detail
        av = "N" if self.attack_vector in [AttackVector.NETWORK, AttackVector.API] else "L"
        ac = "L"  # Default complexity
        pr = "N"  # Default privilege requirement
        ui = "N"  # Default user interaction
        s = "U"  # Default scope
        c = "H" if self.base_severity == Severity.CRITICAL else "M"  # Confidentiality
        i = "H" if self.base_severity == Severity.CRITICAL else "M"  # Integrity
        a = "H" if self.base_severity == Severity.CRITICAL else "M"  # Availability

        return f"CVSS:3.1/AV:{av}/AC:{ac}/PR:{pr}/UI:{ui}/S:{s}/C:{c}/I:{i}/A:{a}"

    def get_detection_methods_list(self) -> List[str]:
        """Parse detection methods from JSON string."""
        if not self.detection_methods:
            return []

        try:
            import json

            result = json.loads(self.detection_methods)
            return result if isinstance(result, list) else []
        except (json.JSONDecodeError, TypeError):
            # Fallback to comma-separated values
            return [method.strip() for method in self.detection_methods.split(",") if method.strip()]

    def set_detection_methods(self, methods: List[str]) -> None:
        """Set detection methods as JSON string."""
        import json

        self.detection_methods = json.dumps(methods)

    def get_reference_urls_list(self) -> List[str]:
        """Parse reference URLs from JSON string."""
        if not self.reference_urls:
            return []

        try:
            import json

            result = json.loads(self.reference_urls)
            return result if isinstance(result, list) else []
        except (json.JSONDecodeError, TypeError):
            return [url.strip() for url in self.reference_urls.split(",") if url.strip()]

    def set_reference_urls(self, urls: List[str]) -> None:
        """Set reference URLs as JSON string."""
        import json

        self.reference_urls = json.dumps(urls)

    @classmethod
    def get_owasp_llm_taxonomies(cls, session: Session) -> List["VulnerabilityTaxonomy"]:
        """Get all OWASP LLM Top 10 taxonomies."""
        return (
            session.query(cls)
            .filter(cls.is_active == True, cls.owasp_id.isnot(None))  # noqa: E712
            .order_by(cls.owasp_id)
            .all()
        )

    @classmethod
    def get_mitre_atlas_taxonomies(cls, session: Session) -> List["VulnerabilityTaxonomy"]:
        """Get all MITRE ATLAS mapped taxonomies."""
        return (
            session.query(cls)
            .filter(cls.is_active == True, cls.atlas_technique.isnot(None))  # noqa: E712
            .order_by(cls.atlas_tactic, cls.atlas_technique)
            .all()
        )

    @classmethod
    def get_by_category(cls, session: Session, category: VulnerabilityCategory) -> List["VulnerabilityTaxonomy"]:
        """Get active taxonomies by category."""
        return (
            session.query(cls)
            .filter(cls.is_active == True, cls.category == category)  # noqa: E712
            .order_by(cls.base_severity.desc(), cls.name)
            .all()
        )


class TaxonomyMapping(Base, AuditMixin, SoftDeleteMixin):
    """
    Taxonomy mapping model for cross-taxonomy relationships.

    This model establishes relationships between different vulnerability
    taxonomies (CWE, CVE, OWASP, MITRE, etc.) with confidence scores.
    """

    __tablename__ = "taxonomy_mappings"

    # Mapping relationship
    source_taxonomy_id: Mapped[str] = mapped_column(String(255), nullable=False, index=True)
    target_taxonomy_id: Mapped[str] = mapped_column(String(255), nullable=False, index=True)

    # Mapping metadata
    mapping_confidence: Mapped[float] = mapped_column(Float, nullable=False, default=0.0)  # 0.0-1.0
    mapping_rationale: Mapped[Optional[str]] = mapped_column(Text, nullable=True)

    def __repr__(self) -> str:
        """String representation of taxonomy mapping."""
        confidence_pct = int(self.mapping_confidence * 100)
        return (
            f"<TaxonomyMapping(source={self.source_taxonomy_id}, "
            f"target={self.target_taxonomy_id}, confidence={confidence_pct}%)>"
        )

    @property
    def is_high_confidence(self) -> bool:
        """Check if this is a high confidence mapping (>= 0.8)."""
        return self.mapping_confidence >= 0.8
