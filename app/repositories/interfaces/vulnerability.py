"""Vulnerability repository interface contract."""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import Any, Dict, List, Optional

from ...models.vulnerability_finding import VulnerabilityFinding


class IVulnerabilityRepository(ABC):
    """Interface contract for vulnerability repository operations."""

    @abstractmethod
    async def create_finding(
        self,
        vulnerability_type: str,
        severity: str,
        description: str,
        scan_id: Optional[str] = None,
        user_id: Optional[str] = None,
        organization_id: Optional[str] = None,
        details: Optional[Dict[str, Any]] = None,
    ) -> VulnerabilityFinding:
        """Create a new vulnerability finding."""
        pass

    @abstractmethod
    async def get_findings_by_severity(self, severity: str) -> List[VulnerabilityFinding]:
        """Get vulnerability findings by severity level."""
        pass

    @abstractmethod
    async def get_findings_by_scan(self, scan_id: str) -> List[VulnerabilityFinding]:
        """Get vulnerability findings for a specific scan."""
        pass

    @abstractmethod
    async def get_user_findings(
        self,
        user_id: str,
        severity_filter: Optional[str] = None,
        limit: int = 100,
    ) -> List[VulnerabilityFinding]:
        """Get vulnerability findings for a specific user."""
        pass

    @abstractmethod
    async def update_finding_status(
        self,
        finding_id: str,
        status: str,
        updated_by: str,
        notes: Optional[str] = None,
    ) -> Optional[VulnerabilityFinding]:
        """Update the status of a vulnerability finding."""
        pass

    @abstractmethod
    async def get_vulnerability_statistics(
        self,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        organization_id: Optional[str] = None,
    ) -> Dict[str, Any]:
        """Get vulnerability statistics."""
        pass

    @abstractmethod
    async def get_critical_findings(self, limit: int = 20) -> List[VulnerabilityFinding]:
        """Get critical vulnerability findings."""
        pass

    @abstractmethod
    async def mark_finding_resolved(
        self,
        finding_id: str,
        resolved_by: str,
        resolution_notes: Optional[str] = None,
    ) -> bool:
        """Mark a vulnerability finding as resolved."""
        pass

    @abstractmethod
    async def get_trending_vulnerabilities(
        self,
        time_period_days: int = 30,
        limit: int = 10,
    ) -> List[Dict[str, Any]]:
        """Get trending vulnerability types."""
        pass
