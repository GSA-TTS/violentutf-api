"""Vulnerability repository interface."""

import uuid
from abc import abstractmethod
from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from app.models.vulnerability_finding import VulnerabilityFinding

from .base import IBaseRepository


class IVulnerabilityRepository(IBaseRepository[VulnerabilityFinding]):
    """Interface for vulnerability repository operations."""

    @abstractmethod
    async def get_by_severity(
        self, severity: str, organization_id: Optional[Union[str, uuid.UUID]] = None, limit: int = 100
    ) -> List[VulnerabilityFinding]:
        """
        Get vulnerabilities by severity level.

        Args:
            severity: Vulnerability severity
            organization_id: Optional organization ID for multi-tenant filtering
            limit: Maximum number of results

        Returns:
            List of vulnerabilities with specified severity
        """
        raise NotImplementedError

    @abstractmethod
    async def get_by_scan(
        self, scan_id: Union[str, uuid.UUID], organization_id: Optional[Union[str, uuid.UUID]] = None
    ) -> List[VulnerabilityFinding]:
        """
        Get vulnerabilities found in a specific scan.

        Args:
            scan_id: Security scan ID
            organization_id: Optional organization ID for multi-tenant filtering

        Returns:
            List of vulnerabilities from the scan
        """
        raise NotImplementedError

    @abstractmethod
    async def get_unresolved_vulnerabilities(
        self, organization_id: Optional[Union[str, uuid.UUID]] = None, severity: Optional[str] = None, limit: int = 100
    ) -> List[VulnerabilityFinding]:
        """
        Get unresolved vulnerabilities.

        Args:
            organization_id: Optional organization ID for multi-tenant filtering
            severity: Optional severity filter
            limit: Maximum number of results

        Returns:
            List of unresolved vulnerabilities
        """
        raise NotImplementedError

    @abstractmethod
    async def get_by_cve(
        self, cve_id: str, organization_id: Optional[Union[str, uuid.UUID]] = None
    ) -> List[VulnerabilityFinding]:
        """
        Get vulnerabilities by CVE ID.

        Args:
            cve_id: CVE identifier
            organization_id: Optional organization ID for multi-tenant filtering

        Returns:
            List of vulnerabilities matching the CVE
        """
        raise NotImplementedError

    @abstractmethod
    async def get_by_target(
        self, target: str, organization_id: Optional[Union[str, uuid.UUID]] = None, limit: int = 100
    ) -> List[VulnerabilityFinding]:
        """
        Get vulnerabilities for a specific target.

        Args:
            target: Target URL or identifier
            organization_id: Optional organization ID for multi-tenant filtering
            limit: Maximum number of results

        Returns:
            List of vulnerabilities for the target
        """
        raise NotImplementedError

    @abstractmethod
    async def mark_as_resolved(
        self,
        vulnerability_id: Union[str, uuid.UUID],
        resolved_by: str,
        resolution_notes: Optional[str] = None,
        organization_id: Optional[Union[str, uuid.UUID]] = None,
    ) -> bool:
        """
        Mark vulnerability as resolved.

        Args:
            vulnerability_id: Vulnerability ID
            resolved_by: User who resolved the vulnerability
            resolution_notes: Optional resolution notes
            organization_id: Optional organization ID for multi-tenant filtering

        Returns:
            True if marked as resolved successfully, False otherwise
        """
        raise NotImplementedError

    @abstractmethod
    async def mark_as_false_positive(
        self,
        vulnerability_id: Union[str, uuid.UUID],
        marked_by: str,
        reason: Optional[str] = None,
        organization_id: Optional[Union[str, uuid.UUID]] = None,
    ) -> bool:
        """
        Mark vulnerability as false positive.

        Args:
            vulnerability_id: Vulnerability ID
            marked_by: User who marked as false positive
            reason: Optional reason for false positive marking
            organization_id: Optional organization ID for multi-tenant filtering

        Returns:
            True if marked as false positive successfully, False otherwise
        """
        raise NotImplementedError

    @abstractmethod
    async def get_vulnerability_statistics(
        self,
        organization_id: Optional[Union[str, uuid.UUID]] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
    ) -> Dict[str, Any]:
        """
        Get vulnerability statistics.

        Args:
            organization_id: Optional organization ID for multi-tenant filtering
            start_date: Optional start date filter
            end_date: Optional end date filter

        Returns:
            Dictionary containing vulnerability statistics
        """
        raise NotImplementedError

    @abstractmethod
    async def get_vulnerability_trends(
        self, organization_id: Optional[Union[str, uuid.UUID]] = None, days: int = 30
    ) -> Dict[str, Any]:
        """
        Get vulnerability trends over time.

        Args:
            organization_id: Optional organization ID for multi-tenant filtering
            days: Number of days to analyze

        Returns:
            Dictionary containing vulnerability trend data
        """
        raise NotImplementedError

    @abstractmethod
    async def search_vulnerabilities(
        self, query: str, organization_id: Optional[Union[str, uuid.UUID]] = None, limit: int = 20
    ) -> List[VulnerabilityFinding]:
        """
        Search vulnerabilities by title, description, or CVE.

        Args:
            query: Search query
            organization_id: Optional organization ID for multi-tenant filtering
            limit: Maximum number of results

        Returns:
            List of matching vulnerabilities
        """
        raise NotImplementedError

    @abstractmethod
    async def get_critical_vulnerabilities(
        self, organization_id: Optional[Union[str, uuid.UUID]] = None, days: int = 7
    ) -> List[VulnerabilityFinding]:
        """
        Get critical vulnerabilities found within specified timeframe.

        Args:
            organization_id: Optional organization ID for multi-tenant filtering
            days: Number of days to look back

        Returns:
            List of critical vulnerabilities
        """
        raise NotImplementedError

    @abstractmethod
    async def update_vulnerability_status(
        self,
        vulnerability_id: Union[str, uuid.UUID],
        status: str,
        updated_by: str,
        notes: Optional[str] = None,
        organization_id: Optional[Union[str, uuid.UUID]] = None,
    ) -> bool:
        """
        Update vulnerability status.

        Args:
            vulnerability_id: Vulnerability ID
            status: New status
            updated_by: User who updated the status
            notes: Optional status update notes
            organization_id: Optional organization ID for multi-tenant filtering

        Returns:
            True if update successful, False otherwise
        """
        raise NotImplementedError

    @abstractmethod
    async def cleanup_resolved_vulnerabilities(
        self, retention_days: int, organization_id: Optional[Union[str, uuid.UUID]] = None
    ) -> int:
        """
        Clean up resolved vulnerabilities based on retention policy.

        Args:
            retention_days: Number of days to retain resolved vulnerabilities
            organization_id: Optional organization ID for multi-tenant filtering

        Returns:
            Number of vulnerabilities cleaned up
        """
        raise NotImplementedError
