"""Vulnerability taxonomy management service."""

from typing import Any, Dict, List, Optional, Union
from uuid import UUID, uuid4

from sqlalchemy.ext.asyncio import AsyncSession
from structlog.stdlib import get_logger

from app.core.errors import NotFoundError, ValidationError
from app.models.vulnerability_taxonomy import VulnerabilityTaxonomy
from app.repositories.vulnerability_taxonomy import VulnerabilityTaxonomyRepository

logger = get_logger(__name__)


class VulnerabilityTaxonomyService:
    """Service for managing vulnerability taxonomies using repository pattern."""

    def __init__(
        self,
        repository_or_session: Union[VulnerabilityTaxonomyRepository, AsyncSession],
    ):
        """Initialize vulnerability taxonomy service with repository or database session.

        Args:
            repository_or_session: Vulnerability taxonomy repository or AsyncSession
        """
        if isinstance(repository_or_session, AsyncSession):
            self.repository = VulnerabilityTaxonomyRepository(repository_or_session)
        else:
            self.repository = repository_or_session

    async def create_taxonomy(self, taxonomy_data: Dict[str, Any], user_id: str) -> VulnerabilityTaxonomy:
        """Create a new vulnerability taxonomy.

        Args:
            taxonomy_data: Taxonomy creation data
            user_id: User creating the taxonomy

        Returns:
            VulnerabilityTaxonomy: Created taxonomy instance

        Raises:
            ValidationError: If taxonomy data is invalid
        """
        try:
            # Add audit fields
            taxonomy_data.update(
                {
                    "created_by": user_id,
                    "updated_by": user_id,
                }
            )

            taxonomy = await self.repository.create(taxonomy_data)
            logger.info(
                "vulnerability_taxonomy_created",
                taxonomy_id=taxonomy.id,
                user_id=user_id,
            )
            return taxonomy

        except Exception as e:
            logger.error("failed_to_create_vulnerability_taxonomy", error=str(e))
            raise ValidationError(f"Failed to create vulnerability taxonomy: {str(e)}")

    async def get_taxonomy(self, taxonomy_id: str) -> Optional[VulnerabilityTaxonomy]:
        """Get vulnerability taxonomy by ID.

        Args:
            taxonomy_id: Taxonomy identifier

        Returns:
            VulnerabilityTaxonomy: Taxonomy instance if found

        Raises:
            NotFoundError: If taxonomy not found
        """
        taxonomy = await self.repository.get(taxonomy_id)
        if not taxonomy:
            raise NotFoundError(f"Vulnerability taxonomy with ID {taxonomy_id} not found")
        return taxonomy

    async def list_taxonomies(
        self,
        skip: int = 0,
        limit: int = 100,
        filters: Optional[Dict[str, Any]] = None,
        category: Optional[str] = None,
    ) -> List[VulnerabilityTaxonomy]:
        """List vulnerability taxonomies with pagination and filtering.

        Args:
            skip: Number of taxonomies to skip
            limit: Maximum number of taxonomies to return
            filters: Optional filters to apply
            category: Optional category filter

        Returns:
            List[VulnerabilityTaxonomy]: List of taxonomies
        """
        if not filters:
            filters = {}

        if category:
            filters["category"] = category

        return await self.repository.list(skip=skip, limit=limit, filters=filters)

    async def update_taxonomy(
        self, taxonomy_id: str, update_data: Dict[str, Any], user_id: str
    ) -> VulnerabilityTaxonomy:
        """Update vulnerability taxonomy.

        Args:
            taxonomy_id: Taxonomy identifier
            update_data: Data to update
            user_id: User performing update

        Returns:
            VulnerabilityTaxonomy: Updated taxonomy instance

        Raises:
            NotFoundError: If taxonomy not found
            ValidationError: If update fails
        """
        try:
            # Verify taxonomy exists before update
            await self.get_taxonomy(taxonomy_id)

            # Add audit fields
            update_data["updated_by"] = user_id

            updated_taxonomy = await self.repository.update(taxonomy_id, update_data)
            logger.info(
                "vulnerability_taxonomy_updated",
                taxonomy_id=taxonomy_id,
                user_id=user_id,
            )
            return updated_taxonomy

        except Exception as e:
            logger.error(
                "failed_to_update_vulnerability_taxonomy",
                taxonomy_id=taxonomy_id,
                error=str(e),
            )
            raise ValidationError(f"Failed to update vulnerability taxonomy: {str(e)}")

    async def delete_taxonomy(self, taxonomy_id: str, user_id: str) -> bool:
        """Delete vulnerability taxonomy.

        Args:
            taxonomy_id: Taxonomy identifier
            user_id: User performing deletion

        Returns:
            bool: True if deletion successful

        Raises:
            NotFoundError: If taxonomy not found
        """
        try:
            # Verify taxonomy exists before deletion
            await self.get_taxonomy(taxonomy_id)

            success = await self.repository.delete(taxonomy_id)
            if success:
                logger.info(
                    "vulnerability_taxonomy_deleted",
                    taxonomy_id=taxonomy_id,
                    user_id=user_id,
                )

            return success

        except Exception as e:
            logger.error(
                "failed_to_delete_vulnerability_taxonomy",
                taxonomy_id=taxonomy_id,
                error=str(e),
            )
            raise

    async def get_taxonomies_by_category(self, category: str) -> List[VulnerabilityTaxonomy]:
        """Get all taxonomies by category.

        Args:
            category: Category name (e.g., 'OWASP', 'CWE', 'CVSS')

        Returns:
            List[VulnerabilityTaxonomy]: Taxonomies in specified category
        """
        return await self.list_taxonomies(filters={"category": category})

    async def search_taxonomies(self, query: str) -> List[VulnerabilityTaxonomy]:
        """Search taxonomies by name or description.

        Args:
            query: Search query string

        Returns:
            List[VulnerabilityTaxonomy]: Matching taxonomies
        """
        # This would use full-text search in a real implementation
        all_taxonomies = await self.list_taxonomies(limit=1000)

        # Simple text matching for demonstration
        matching = []
        query_lower = query.lower()

        for taxonomy in all_taxonomies:
            name = getattr(taxonomy, "name", "").lower()
            description = getattr(taxonomy, "description", "").lower()

            if query_lower in name or query_lower in description:
                matching.append(taxonomy)

        return matching

    async def get_taxonomy_hierarchy(self, taxonomy_id: str) -> Dict[str, Any]:
        """Get taxonomy hierarchy (parent/children relationships).

        Args:
            taxonomy_id: Root taxonomy identifier

        Returns:
            Dict: Hierarchy structure
        """
        taxonomy = await self.get_taxonomy(taxonomy_id)

        # Build hierarchy structure (simplified implementation)
        hierarchy = {
            "id": taxonomy.id,
            "name": getattr(taxonomy, "name", ""),
            "category": getattr(taxonomy, "category", ""),
            "children": [],  # Would be populated from parent/child relationships
        }

        return hierarchy
