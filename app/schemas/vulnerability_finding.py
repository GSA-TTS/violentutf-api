"""Pydantic schemas for vulnerability finding management."""

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field

from app.core.enums import RiskRating, Severity, VulnerabilityStatus
from app.schemas.base import BaseEntityResponse, TimestampMixin


class VulnerabilityFindingBase(BaseModel):
    """Base vulnerability finding schema."""

    model_config = ConfigDict(protected_namespaces=())

    taxonomy_id: Optional[str] = Field(None, description="Associated taxonomy ID")
    scan_id: Optional[str] = Field(None, description="Associated scan ID")

    # Basic information
    title: str = Field(..., min_length=1, max_length=300, description="Finding title")
    description: Optional[str] = Field(None, description="Detailed description")

    # Discovery context
    discovered_by: str = Field(..., max_length=100, description="Who discovered this finding")
    discovery_method: str = Field(..., max_length=50, description="How it was discovered")

    # Location and context
    affected_component: Optional[str] = Field(None, max_length=200, description="Affected component")
    affected_endpoint: Optional[str] = Field(None, max_length=500, description="Affected endpoint")
    affected_parameter: Optional[str] = Field(None, max_length=200, description="Affected parameter")
    file_path: Optional[str] = Field(None, max_length=1000, description="File path if applicable")
    line_number: Optional[int] = Field(None, ge=1, description="Line number if applicable")

    # Evidence and proof of concept
    evidence: Optional[Dict[str, Any]] = Field(None, description="Evidence JSON")
    proof_of_concept: Optional[str] = Field(None, description="Proof of concept")
    reproduction_steps: Optional[str] = Field(None, description="Steps to reproduce")

    # Risk assessment
    severity: Severity = Field(..., description="Severity level")
    risk_rating: RiskRating = Field(..., description="Risk rating")
    cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="CVSS score")
    cvss_vector: Optional[str] = Field(None, max_length=200, description="CVSS vector string")
    exploitability: Optional[float] = Field(None, ge=0.0, le=10.0, description="Exploitability score")
    impact_rating: Optional[float] = Field(None, ge=0.0, le=10.0, description="Impact rating")

    # Business context
    business_impact: Optional[str] = Field(None, description="Business impact description")
    affected_users: Optional[str] = Field(None, max_length=200, description="Affected users")
    data_at_risk: Optional[str] = Field(None, description="Data at risk description")
    compliance_impact: Optional[str] = Field(None, description="Compliance implications")

    # Status and workflow
    status: VulnerabilityStatus = Field(default=VulnerabilityStatus.NEW, description="Finding status")
    verification_status: Optional[str] = Field(None, max_length=50, description="Verification status")
    remediation_status: Optional[str] = Field(None, max_length=50, description="Remediation status")
    false_positive_reason: Optional[str] = Field(None, description="Reason if marked as false positive")

    # Assignment and ownership
    assigned_to: Optional[str] = Field(None, description="Assigned user ID")
    remediation_owner: Optional[str] = Field(None, max_length=100, description="Remediation owner")

    # Timeline and SLAs
    first_seen: Optional[datetime] = Field(None, description="First time this vulnerability was seen")
    last_seen: Optional[datetime] = Field(None, description="Last time this vulnerability was seen")
    verified_at: Optional[datetime] = Field(None, description="When finding was verified")
    remediation_deadline: Optional[datetime] = Field(None, description="Remediation deadline")
    resolved_at: Optional[datetime] = Field(None, description="When finding was resolved")

    # Remediation information
    remediation_plan: Optional[str] = Field(None, description="Remediation plan")
    remediation_effort: Optional[str] = Field(None, max_length=50, description="Remediation effort estimate")
    remediation_notes: Optional[str] = Field(None, description="Remediation notes")
    fix_version: Optional[str] = Field(None, max_length=100, description="Fix version")

    # AI/ML specific fields
    ai_model_affected: Optional[str] = Field(None, max_length=200, description="Affected AI model")
    prompt_pattern: Optional[str] = Field(None, description="Malicious prompt pattern")
    model_output: Optional[str] = Field(None, description="Model output that revealed vulnerability")
    attack_scenario: Optional[str] = Field(None, description="Attack scenario description")

    # Classification override
    custom_classification: Optional[str] = Field(None, max_length=100, description="Custom classification")
    classification_confidence: Optional[float] = Field(None, ge=0.0, le=1.0, description="Classification confidence")

    # Metadata
    external_id: Optional[str] = Field(None, max_length=100, description="External system ID")
    tags: Optional[str] = Field(None, max_length=500, description="Finding tags")
    notes: Optional[str] = Field(None, description="Additional notes")


class VulnerabilityFindingCreate(VulnerabilityFindingBase):
    """Create vulnerability finding schema."""

    # Set discovered_at to current time by default
    discovered_at: Optional[datetime] = Field(default_factory=datetime.utcnow, description="Discovery timestamp")

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "title": "SQL Injection in User Login",
                "description": "SQL injection vulnerability in login form",
                "severity": "high",
                "risk_rating": "high_risk",
                "discovered_by": "security_scan",
                "discovery_method": "static_analysis",
                "affected_component": "auth_service",
                "affected_endpoint": "/api/auth/login",
                "affected_parameter": "username",
                "cvss_score": 7.5,
                "business_impact": "Potential data breach affecting user credentials",
            }
        }
    )


class VulnerabilityFindingUpdate(BaseModel):
    """Update vulnerability finding schema."""

    model_config = ConfigDict(protected_namespaces=())

    taxonomy_id: Optional[str] = None
    title: Optional[str] = Field(None, min_length=1, max_length=300)
    description: Optional[str] = None
    affected_component: Optional[str] = Field(None, max_length=200)
    affected_endpoint: Optional[str] = Field(None, max_length=500)
    affected_parameter: Optional[str] = Field(None, max_length=200)
    file_path: Optional[str] = Field(None, max_length=1000)
    line_number: Optional[int] = Field(None, ge=1)
    evidence: Optional[Dict[str, Any]] = None
    proof_of_concept: Optional[str] = None
    reproduction_steps: Optional[str] = None
    severity: Optional[Severity] = None
    risk_rating: Optional[RiskRating] = None
    cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    cvss_vector: Optional[str] = Field(None, max_length=200)
    exploitability: Optional[float] = Field(None, ge=0.0, le=10.0)
    impact_rating: Optional[float] = Field(None, ge=0.0, le=10.0)
    business_impact: Optional[str] = None
    affected_users: Optional[str] = Field(None, max_length=200)
    data_at_risk: Optional[str] = None
    compliance_impact: Optional[str] = None
    status: Optional[VulnerabilityStatus] = None
    verification_status: Optional[str] = Field(None, max_length=50)
    remediation_status: Optional[str] = Field(None, max_length=50)
    false_positive_reason: Optional[str] = None
    assigned_to: Optional[str] = None
    remediation_owner: Optional[str] = Field(None, max_length=100)
    verified_at: Optional[datetime] = None
    remediation_deadline: Optional[datetime] = None
    resolved_at: Optional[datetime] = None
    remediation_plan: Optional[str] = None
    remediation_effort: Optional[str] = Field(None, max_length=50)
    remediation_notes: Optional[str] = None
    fix_version: Optional[str] = Field(None, max_length=100)
    ai_model_affected: Optional[str] = Field(None, max_length=200)
    prompt_pattern: Optional[str] = None
    model_output: Optional[str] = None
    attack_scenario: Optional[str] = None
    custom_classification: Optional[str] = Field(None, max_length=100)
    classification_confidence: Optional[float] = Field(None, ge=0.0, le=1.0)
    external_id: Optional[str] = Field(None, max_length=100)
    tags: Optional[str] = Field(None, max_length=500)
    notes: Optional[str] = None


class VulnerabilityFindingResponse(VulnerabilityFindingBase, BaseEntityResponse, TimestampMixin):
    """Vulnerability finding response schema."""

    discovered_at: datetime = Field(..., description="Discovery timestamp")

    # Computed fields
    days_open: Optional[int] = Field(None, description="Days since discovery")
    is_overdue: Optional[bool] = Field(None, description="Whether finding is overdue")
    time_to_remediation: Optional[int] = Field(None, description="Time to remediation in days")

    model_config = ConfigDict(
        from_attributes=True,
        json_schema_extra={
            "example": {
                "id": "550e8400-e29b-41d4-a716-446655440000",
                "title": "SQL Injection in User Login",
                "description": "SQL injection vulnerability in login form",
                "severity": "high",
                "risk_rating": "high_risk",
                "status": "new",
                "discovered_by": "security_scan",
                "discovered_at": "2024-01-01T00:00:00Z",
                "affected_component": "auth_service",
                "cvss_score": 7.5,
                "days_open": 5,
                "is_overdue": False,
                "created_at": "2024-01-01T00:00:00Z",
                "updated_at": "2024-01-01T00:00:00Z",
            }
        },
    )


class VulnerabilityFindingListResponse(BaseModel):
    """List response for vulnerability findings."""

    findings: List[VulnerabilityFindingResponse]
    total: int = Field(..., description="Total number of findings")
    page: int = Field(..., description="Current page number")
    size: int = Field(..., description="Page size")
    has_next: bool = Field(..., description="Whether there are more pages")
    has_prev: bool = Field(..., description="Whether there are previous pages")


class VulnerabilityFindingStatistics(BaseModel):
    """Statistics for vulnerability findings."""

    total_findings: int = Field(..., description="Total number of findings")
    active_findings: int = Field(..., description="Active findings count")
    by_status: Dict[str, int] = Field(..., description="Count by status")
    by_severity: Dict[str, int] = Field(..., description="Count by severity")
    by_risk_rating: Dict[str, int] = Field(..., description="Count by risk rating")
    ai_specific_count: int = Field(..., description="AI-specific findings count")
    overdue_count: int = Field(..., description="Overdue findings count")
    avg_resolution_time_hours: float = Field(..., description="Average resolution time in hours")
    top_affected_components: List[Dict[str, Any]] = Field(..., description="Top affected components")
    metrics: Dict[str, float] = Field(..., description="Various metrics and percentages")


class VulnerabilityFindingFilter(BaseModel):
    """Filter parameters for finding queries."""

    scan_id: Optional[str] = None
    taxonomy_id: Optional[str] = None
    severity: Optional[Severity] = None
    status: Optional[VulnerabilityStatus] = None
    risk_rating: Optional[RiskRating] = None
    assigned_to: Optional[str] = None
    affected_component: Optional[str] = None
    discovery_method: Optional[str] = None
    ai_model_affected: Optional[str] = None
    is_overdue: Optional[bool] = None
    search: Optional[str] = Field(None, min_length=1, max_length=100, description="Search term")

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "severity": "high",
                "status": "new",
                "affected_component": "auth_service",
                "search": "injection",
            }
        }
    )


class BulkUpdateRequest(BaseModel):
    """Bulk update request for findings."""

    finding_ids: List[str] = Field(..., min_length=1, description="List of finding IDs to update")
    status: Optional[VulnerabilityStatus] = None
    assigned_to: Optional[str] = None
    severity: Optional[Severity] = None
    risk_rating: Optional[RiskRating] = None
    remediation_deadline: Optional[datetime] = None
    tags: Optional[str] = Field(None, max_length=500)

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "finding_ids": ["id1", "id2", "id3"],
                "status": "in_progress",
                "assigned_to": "user-123",
            }
        }
    )


class BulkUpdateResponse(BaseModel):
    """Bulk update response."""

    updated_count: int = Field(..., description="Number of findings updated")
    failed_count: int = Field(..., description="Number of findings that failed to update")
    errors: List[str] = Field(default_factory=list, description="Error messages if any")

    model_config = ConfigDict(json_schema_extra={"example": {"updated_count": 3, "failed_count": 0, "errors": []}})


class FindingTrendRequest(BaseModel):
    """Request for finding trend data."""

    days: int = Field(default=30, ge=1, le=365, description="Number of days to include")
    organization_id: Optional[str] = Field(None, description="Organization ID")

    model_config = ConfigDict(json_schema_extra={"example": {"days": 30, "organization_id": "org-123"}})


class FindingTrendResponse(BaseModel):
    """Response with finding trend data."""

    discovery_trend: List[Dict[str, Any]] = Field(..., description="Daily discovery trend")
    resolution_trend: List[Dict[str, Any]] = Field(..., description="Daily resolution trend")
    period_days: int = Field(..., description="Period in days")

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "discovery_trend": [{"date": "2024-01-01", "data": {"critical": 2, "high": 5}}],
                "resolution_trend": [{"date": "2024-01-01", "data": {"critical": 1, "high": 3}}],
                "period_days": 30,
            }
        }
    )
