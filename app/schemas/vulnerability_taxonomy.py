"""Pydantic schemas for vulnerability taxonomy management."""

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field

from app.core.enums import AttackVector, MITREATLASTactic, OWASPLLMCategory, Severity, VulnerabilityCategory
from app.schemas.base import BaseEntityResponse, TimestampMixin


class VulnerabilityTaxonomyBase(BaseModel):
    """Base vulnerability taxonomy schema."""

    name: str = Field(..., min_length=1, max_length=200, description="Taxonomy name")
    category: VulnerabilityCategory = Field(..., description="Vulnerability category")
    description: Optional[str] = Field(None, max_length=2000, description="Detailed description")

    # Industry standard mappings
    cwe_id: Optional[str] = Field(None, max_length=20, description="CWE identifier")
    cve_id: Optional[str] = Field(None, max_length=20, description="CVE identifier")
    owasp_id: Optional[OWASPLLMCategory] = Field(None, description="OWASP LLM Top 10 category")
    atlas_technique: Optional[str] = Field(None, max_length=20, description="MITRE ATLAS technique ID")
    atlas_tactic: Optional[MITREATLASTactic] = Field(None, description="MITRE ATLAS tactic")

    # AI/ML specific attributes
    is_ai_specific: bool = Field(default=False, description="Whether this is AI/ML specific")
    attack_vector: AttackVector = Field(..., description="Attack vector type")
    ai_model_types: Optional[str] = Field(None, max_length=500, description="Affected AI model types")

    # Risk assessment parameters
    base_severity: Severity = Field(..., description="Base severity level")
    exploitability_score: float = Field(default=0.0, ge=0.0, le=10.0, description="Exploitability score (0-10)")
    impact_score: float = Field(default=0.0, ge=0.0, le=10.0, description="Impact score (0-10)")
    base_cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="CVSS base score")

    # Detection and remediation guidance
    detection_methods: Optional[str] = Field(None, description="JSON string of detection methods")
    remediation_guidance: Optional[str] = Field(None, description="Remediation guidance")
    prevention_measures: Optional[str] = Field(None, description="Prevention measures")

    # Metadata
    reference_urls: Optional[str] = Field(None, description="Reference URLs")
    tags: Optional[str] = Field(None, max_length=500, description="Taxonomy tags")
    is_active: bool = Field(default=True, description="Whether taxonomy is active")


class VulnerabilityTaxonomyCreate(VulnerabilityTaxonomyBase):
    """Create vulnerability taxonomy schema."""

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "name": "Prompt Injection",
                "category": "prompt_injection",
                "description": "Malicious prompts designed to bypass AI safety filters",
                "owasp_id": "LLM01",
                "is_ai_specific": True,
                "attack_vector": "prompt",
                "base_severity": "critical",
                "exploitability_score": 8.5,
                "impact_score": 9.0,
                "detection_methods": '["Pattern matching", "Semantic analysis"]',
                "remediation_guidance": "Implement input validation and prompt sanitization",
            }
        }
    )


class VulnerabilityTaxonomyUpdate(BaseModel):
    """Update vulnerability taxonomy schema."""

    name: Optional[str] = Field(None, min_length=1, max_length=200)
    category: Optional[VulnerabilityCategory] = None
    description: Optional[str] = Field(None, max_length=2000)
    cwe_id: Optional[str] = Field(None, max_length=20)
    cve_id: Optional[str] = Field(None, max_length=20)
    owasp_id: Optional[OWASPLLMCategory] = None
    atlas_technique: Optional[str] = Field(None, max_length=20)
    atlas_tactic: Optional[MITREATLASTactic] = None
    is_ai_specific: Optional[bool] = None
    attack_vector: Optional[AttackVector] = None
    ai_model_types: Optional[str] = Field(None, max_length=500)
    base_severity: Optional[Severity] = None
    exploitability_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    impact_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    base_cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    detection_methods: Optional[str] = None
    remediation_guidance: Optional[str] = None
    prevention_measures: Optional[str] = None
    reference_urls: Optional[str] = None
    tags: Optional[str] = Field(None, max_length=500)
    is_active: Optional[bool] = None


class VulnerabilityTaxonomyResponse(VulnerabilityTaxonomyBase, BaseEntityResponse, TimestampMixin):
    """Vulnerability taxonomy response schema."""

    # Computed fields
    calculated_risk_score: Optional[float] = Field(None, description="Calculated risk score")
    finding_count: Optional[int] = Field(None, description="Number of findings using this taxonomy")

    model_config = ConfigDict(
        from_attributes=True,
        json_schema_extra={
            "example": {
                "id": "550e8400-e29b-41d4-a716-446655440000",
                "name": "Prompt Injection",
                "category": "prompt_injection",
                "description": "Malicious prompts designed to bypass AI safety filters",
                "owasp_id": "LLM01",
                "is_ai_specific": True,
                "attack_vector": "prompt",
                "base_severity": "critical",
                "exploitability_score": 8.5,
                "impact_score": 9.0,
                "is_active": True,
                "calculated_risk_score": 8.75,
                "finding_count": 15,
                "created_at": "2024-01-01T00:00:00Z",
                "updated_at": "2024-01-01T00:00:00Z",
            }
        },
    )


class VulnerabilityTaxonomyListResponse(BaseModel):
    """List response for vulnerability taxonomies."""

    taxonomies: List[VulnerabilityTaxonomyResponse]
    total: int = Field(..., description="Total number of taxonomies")
    page: int = Field(..., description="Current page number")
    size: int = Field(..., description="Page size")
    has_next: bool = Field(..., description="Whether there are more pages")
    has_prev: bool = Field(..., description="Whether there are previous pages")


class VulnerabilityTaxonomyStatistics(BaseModel):
    """Statistics for vulnerability taxonomies."""

    total_taxonomies: int = Field(..., description="Total number of taxonomies")
    by_category: Dict[str, int] = Field(..., description="Count by category")
    by_severity: Dict[str, int] = Field(..., description="Count by severity")
    ai_specific: int = Field(..., description="Number of AI-specific taxonomies")
    owasp_llm_mapped: int = Field(..., description="Number mapped to OWASP LLM Top 10")
    mitre_atlas_mapped: int = Field(..., description="Number mapped to MITRE ATLAS")
    coverage: Dict[str, float] = Field(..., description="Coverage percentages")


class VulnerabilityTaxonomyFilter(BaseModel):
    """Filter parameters for taxonomy queries."""

    category: Optional[VulnerabilityCategory] = None
    severity: Optional[Severity] = None
    is_ai_specific: Optional[bool] = None
    owasp_id: Optional[OWASPLLMCategory] = None
    atlas_tactic: Optional[MITREATLASTactic] = None
    is_active: Optional[bool] = True
    search: Optional[str] = Field(None, min_length=1, max_length=100, description="Search term")

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "category": "prompt_injection",
                "severity": "critical",
                "is_ai_specific": True,
                "is_active": True,
                "search": "injection",
            }
        }
    )


class DefaultTaxonomiesRequest(BaseModel):
    """Request to create default taxonomies."""

    organization_id: Optional[str] = Field(None, description="Organization ID for multi-tenant setups")
    overwrite_existing: bool = Field(default=False, description="Whether to overwrite existing taxonomies")


class DefaultTaxonomiesResponse(BaseModel):
    """Response for default taxonomies creation."""

    created_count: int = Field(..., description="Number of taxonomies created")
    skipped_count: int = Field(..., description="Number of taxonomies skipped (already exist)")
    created_taxonomies: List[VulnerabilityTaxonomyResponse] = Field(..., description="Created taxonomies")

    model_config = ConfigDict(
        json_schema_extra={"example": {"created_count": 3, "skipped_count": 7, "created_taxonomies": []}}
    )


class TaxonomyRecommendationRequest(BaseModel):
    """Request for taxonomy recommendations."""

    target_type: str = Field(..., description="Target type (web_app, ai_model, api, llm)")
    organization_id: Optional[str] = Field(None, description="Organization ID")

    model_config = ConfigDict(json_schema_extra={"example": {"target_type": "ai_model", "organization_id": "org-123"}})


class TaxonomyRecommendationResponse(BaseModel):
    """Response with recommended taxonomies."""

    target_type: str = Field(..., description="Target type")
    recommended_taxonomies: List[VulnerabilityTaxonomyResponse] = Field(..., description="Recommended taxonomies")
    recommendation_reason: str = Field(..., description="Reason for these recommendations")

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "target_type": "ai_model",
                "recommended_taxonomies": [],
                "recommendation_reason": "Based on AI/ML specific vulnerability patterns",
            }
        }
    )
