"""Tests for vulnerability taxonomy repository."""

from datetime import datetime, timezone
from unittest.mock import AsyncMock, MagicMock

import pytest
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.enums import (
    AttackVector,
    OWASPLLMCategory,
    Severity,
    VulnerabilityCategory,
)
from app.models.vulnerability_taxonomy import VulnerabilityTaxonomy
from app.repositories.vulnerability_taxonomy import VulnerabilityTaxonomyRepository


class TestVulnerabilityTaxonomyRepository:
    """Test suite for vulnerability taxonomy repository."""

    @pytest.fixture
    def mock_session(self):
        """Create mock async session."""
        session = AsyncMock(spec=AsyncSession)
        return session

    @pytest.fixture
    def repository(self, mock_session):
        """Create repository instance for testing."""
        return VulnerabilityTaxonomyRepository(mock_session)

    @pytest.fixture
    def sample_taxonomy(self):
        """Create sample taxonomy for testing."""
        return VulnerabilityTaxonomy(
            id="test-taxonomy-1",
            name="Test Taxonomy",
            category=VulnerabilityCategory.PROMPT_INJECTION,
            description="Test description",
            owasp_id=OWASPLLMCategory.LLM01_PROMPT_INJECTION,
            is_ai_specific=True,
            attack_vector=AttackVector.PROMPT,
            base_severity=Severity.HIGH,
            exploitability_score=8.0,
            impact_score=7.5,
            is_active=True,
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )

    @pytest.mark.asyncio
    async def test_get_by_cwe_id(self, repository, mock_session, sample_taxonomy):
        """Test getting taxonomy by CWE ID."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = sample_taxonomy
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_by_cwe_id("CWE-79")

        # Verify
        assert result == sample_taxonomy
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_by_cwe_id_not_found(self, repository, mock_session):
        """Test getting taxonomy by CWE ID when not found."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = None
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_by_cwe_id("CWE-999")

        # Verify
        assert result is None
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_by_owasp_id(self, repository, mock_session, sample_taxonomy):
        """Test getting taxonomy by OWASP LLM ID."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = sample_taxonomy
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_by_owasp_id(OWASPLLMCategory.LLM01_PROMPT_INJECTION)

        # Verify
        assert result == sample_taxonomy
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_by_owasp_id_with_organization(self, repository, mock_session, sample_taxonomy):
        """Test getting taxonomy by OWASP ID with organization filtering."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = sample_taxonomy
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_by_owasp_id(OWASPLLMCategory.LLM01_PROMPT_INJECTION, organization_id="org-123")

        # Verify
        assert result == sample_taxonomy
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_by_atlas_technique(self, repository, mock_session, sample_taxonomy):
        """Test getting taxonomy by MITRE ATLAS technique."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = sample_taxonomy
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_by_atlas_technique("AML.T0001")

        # Verify
        assert result == sample_taxonomy
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_by_category(self, repository, mock_session, sample_taxonomy):
        """Test getting taxonomies by category."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_by_category(VulnerabilityCategory.PROMPT_INJECTION)

        # Verify
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_ai_specific_taxonomies(self, repository, mock_session, sample_taxonomy):
        """Test getting AI-specific taxonomies."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_ai_specific_taxonomies()

        # Verify
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_owasp_llm_taxonomies(self, repository, mock_session, sample_taxonomy):
        """Test getting OWASP LLM taxonomies."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_owasp_llm_taxonomies()

        # Verify
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_mitre_atlas_taxonomies(self, repository, mock_session, sample_taxonomy):
        """Test getting MITRE ATLAS taxonomies."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_mitre_atlas_taxonomies()

        # Verify
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_by_severity_range(self, repository, mock_session, sample_taxonomy):
        """Test getting taxonomies by severity range."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_by_severity_range(Severity.MEDIUM, Severity.CRITICAL)

        # Verify
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_search_taxonomies(self, repository, mock_session, sample_taxonomy):
        """Test searching taxonomies."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.search_taxonomies("injection")

        # Verify
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_taxonomy_statistics(self, repository, mock_session):
        """Test getting taxonomy statistics."""
        # Setup mocks for multiple queries
        mock_results = []

        # Total count result
        total_result = MagicMock()
        total_result.scalar_one.return_value = 10
        mock_results.append(total_result)

        # Category count result
        category_result = MagicMock()
        category_result.all.return_value = [(VulnerabilityCategory.PROMPT_INJECTION, 5)]
        mock_results.append(category_result)

        # Severity count result
        severity_result = MagicMock()
        severity_result.all.return_value = [(Severity.HIGH, 3)]
        mock_results.append(severity_result)

        # AI-specific count result
        ai_result = MagicMock()
        ai_result.scalar_one.return_value = 8
        mock_results.append(ai_result)

        # OWASP count result
        owasp_result = MagicMock()
        owasp_result.scalar_one.return_value = 6
        mock_results.append(owasp_result)

        # ATLAS count result
        atlas_result = MagicMock()
        atlas_result.scalar_one.return_value = 4
        mock_results.append(atlas_result)

        # Setup session to return different results for each call
        mock_session.execute.side_effect = mock_results

        # Execute
        result = await repository.get_taxonomy_statistics()

        # Verify
        assert result["total_taxonomies"] == 10
        assert result["by_category"]["prompt_injection"] == 5
        assert result["by_severity"]["high"] == 3
        assert result["ai_specific"] == 8
        assert result["owasp_llm_mapped"] == 6
        assert result["mitre_atlas_mapped"] == 4
        assert "coverage" in result
        assert result["coverage"]["ai_coverage"] == 80.0
        assert result["coverage"]["owasp_coverage"] == 60.0
        assert result["coverage"]["atlas_coverage"] == 40.0

    @pytest.mark.asyncio
    async def test_get_recommended_taxonomies_web_app(self, repository, mock_session, sample_taxonomy):
        """Test getting recommended taxonomies for web application."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_recommended_taxonomies("web_app")

        # Verify
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_recommended_taxonomies_ai_model(self, repository, mock_session, sample_taxonomy):
        """Test getting recommended taxonomies for AI model."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_recommended_taxonomies("ai_model")

        # Verify
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_recommended_taxonomies_unknown_type(self, repository, mock_session, sample_taxonomy):
        """Test getting recommended taxonomies for unknown target type."""
        # Setup mock for get_by_severity_range call
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.get_recommended_taxonomies("unknown_type")

        # Verify - should fall back to high-severity taxonomies
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_bulk_activate_deactivate(self, repository, mock_session):
        """Test bulk activate/deactivate taxonomies."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.rowcount = 3
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.bulk_activate_deactivate(["id1", "id2", "id3"], is_active=False)

        # Verify
        assert result == 3
        mock_session.execute.assert_called_once()
        mock_session.commit.assert_called_once()

    @pytest.mark.asyncio
    async def test_create_default_taxonomies(self, repository, mock_session, sample_taxonomy):
        """Test creating default taxonomies."""
        # Setup mock for get_by_owasp_id to return None (doesn't exist)
        get_mock_result = MagicMock()
        get_mock_result.scalar_one_or_none.return_value = None

        # Setup mock for create to return sample taxonomy
        repository.create = AsyncMock(return_value=sample_taxonomy)
        repository.get_by_owasp_id = AsyncMock(return_value=None)

        # Execute
        result = await repository.create_default_taxonomies()

        # Verify
        assert len(result) >= 1  # At least one taxonomy created
        assert repository.get_by_owasp_id.call_count >= 1
        assert repository.create.call_count >= 1

    @pytest.mark.asyncio
    async def test_create_default_taxonomies_already_exist(self, repository, mock_session, sample_taxonomy):
        """Test creating default taxonomies when they already exist."""
        # Setup mock to return existing taxonomy
        repository.get_by_owasp_id = AsyncMock(return_value=sample_taxonomy)
        repository.create = AsyncMock()

        # Execute
        result = await repository.create_default_taxonomies()

        # Verify
        assert len(result) == 0  # No new taxonomies created
        assert repository.get_by_owasp_id.call_count >= 1
        assert repository.create.call_count == 0

    @pytest.mark.asyncio
    async def test_create_default_taxonomies_with_organization(self, repository, mock_session, sample_taxonomy):
        """Test creating default taxonomies with organization ID."""
        # Setup mocks
        repository.get_by_owasp_id = AsyncMock(return_value=None)
        repository.create = AsyncMock(return_value=sample_taxonomy)

        # Execute
        result = await repository.create_default_taxonomies(organization_id="org-123")

        # Verify
        assert len(result) >= 1
        # Check that organization_id was passed to get_by_owasp_id
        for call in repository.get_by_owasp_id.call_args_list:
            args, kwargs = call
            assert kwargs.get("organization_id") == "org-123" or len(args) > 1

    @pytest.mark.asyncio
    async def test_severity_order_mapping(self, repository):
        """Test that severity order mapping is correct."""
        # This tests the internal method used in get_by_severity_range
        severity_order = {
            Severity.INFO: 1,
            Severity.LOW: 2,
            Severity.MEDIUM: 3,
            Severity.HIGH: 4,
            Severity.CRITICAL: 5,
        }

        # Test that CRITICAL is highest
        assert severity_order[Severity.CRITICAL] > severity_order[Severity.HIGH]
        assert severity_order[Severity.HIGH] > severity_order[Severity.MEDIUM]
        assert severity_order[Severity.MEDIUM] > severity_order[Severity.LOW]
        assert severity_order[Severity.LOW] > severity_order[Severity.INFO]

    @pytest.mark.asyncio
    async def test_repository_initialization(self, mock_session):
        """Test repository initialization."""
        repository = VulnerabilityTaxonomyRepository(mock_session)

        assert repository.session == mock_session
        assert repository.model == VulnerabilityTaxonomy

    @pytest.mark.asyncio
    async def test_search_with_organization_filter(self, repository, mock_session, sample_taxonomy):
        """Test search with organization filtering."""
        # Setup mock
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = [sample_taxonomy]
        mock_session.execute.return_value = mock_result

        # Execute
        result = await repository.search_taxonomies("injection", organization_id="org-123", limit=25)

        # Verify
        assert result == [sample_taxonomy]
        mock_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_statistics_zero_total(self, repository, mock_session):
        """Test getting statistics when total is zero."""
        # Setup mock for zero total
        total_result = MagicMock()
        total_result.scalar_one.return_value = 0

        category_result = MagicMock()
        category_result.all.return_value = []

        severity_result = MagicMock()
        severity_result.all.return_value = []

        ai_result = MagicMock()
        ai_result.scalar_one.return_value = 0

        owasp_result = MagicMock()
        owasp_result.scalar_one.return_value = 0

        atlas_result = MagicMock()
        atlas_result.scalar_one.return_value = 0

        mock_session.execute.side_effect = [
            total_result,
            category_result,
            severity_result,
            ai_result,
            owasp_result,
            atlas_result,
        ]

        # Execute
        result = await repository.get_taxonomy_statistics()

        # Verify
        assert result["total_taxonomies"] == 0
        assert result["coverage"]["ai_coverage"] == 0
        assert result["coverage"]["owasp_coverage"] == 0
        assert result["coverage"]["atlas_coverage"] == 0
