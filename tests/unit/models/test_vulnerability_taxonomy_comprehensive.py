"""
Comprehensive tests for vulnerability taxonomy models and classification system.

This test suite addresses CRITICAL security violations identified in ADRaudit report:
- Database Missing Vulnerability Tables (alembic/versions/)
- Models Not Imported/Exported
- CWE/CVE/MITRE classification system
- Taxonomy mapping functionality

Tests follow security-first design principles with comprehensive validation.
"""

import uuid
from datetime import datetime, timezone
from typing import Dict, List, Optional
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.errors import ValidationError
from app.models.vulnerability_taxonomy import TaxonomyMapping, VulnerabilityTaxonomy


class TestVulnerabilityTaxonomyModel:
    """Test VulnerabilityTaxonomy model validation and functionality."""

    @pytest.fixture
    def sample_cwe_taxonomy(self) -> Dict:
        """Create sample CWE taxonomy data."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        return {
            "name": "Cross-site Scripting",
            "category": VulnerabilityCategory.INJECTION,
            "description": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
            "cwe_id": "CWE-79",
            "attack_vector": AttackVector.NETWORK,
            "base_severity": Severity.MEDIUM,
            "exploitability_score": 3.9,
            "impact_score": 2.7,
            "is_ai_specific": False,
        }

    @pytest.fixture
    def sample_cve_taxonomy(self) -> Dict:
        """Create sample CVE taxonomy data."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        return {
            "name": "Log4j Remote Code Execution",
            "category": VulnerabilityCategory.INJECTION,
            "description": "Apache Log4j2 JNDI features do not protect against attacker controlled LDAP and other JNDI related endpoints.",
            "cve_id": "CVE-2021-44228",
            "attack_vector": AttackVector.NETWORK,
            "base_severity": Severity.CRITICAL,
            "exploitability_score": 3.9,
            "impact_score": 6.0,
            "is_ai_specific": False,
        }

    @pytest.fixture
    def sample_mitre_taxonomy(self) -> Dict:
        """Create sample MITRE ATT&CK taxonomy data."""
        from app.core.enums import AttackVector, MITREATLASTactic, Severity, VulnerabilityCategory

        return {
            "name": "PowerShell Command and Scripting Interpreter",
            "category": VulnerabilityCategory.INJECTION,
            "description": "Adversaries may abuse PowerShell commands and scripts for execution.",
            "atlas_technique": "T1059.001",
            "atlas_tactic": MITREATLASTactic.EXECUTION,
            "attack_vector": AttackVector.LOCAL,
            "base_severity": Severity.HIGH,
            "exploitability_score": 2.8,
            "impact_score": 4.2,
            "is_ai_specific": False,
        }

    def test_vulnerability_taxonomy_creation_cwe(self, sample_cwe_taxonomy):
        """Test creating CWE vulnerability taxonomy."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        taxonomy = VulnerabilityTaxonomy(**sample_cwe_taxonomy)

        assert taxonomy.category == VulnerabilityCategory.INJECTION
        assert taxonomy.cwe_id == "CWE-79"
        assert taxonomy.name == "Cross-site Scripting"
        assert taxonomy.base_severity == Severity.MEDIUM
        assert taxonomy.exploitability_score == 3.9
        assert taxonomy.impact_score == 2.7
        assert taxonomy.attack_vector == AttackVector.NETWORK
        assert taxonomy.is_ai_specific is False

    def test_vulnerability_taxonomy_creation_cve(self, sample_cve_taxonomy):
        """Test creating CVE vulnerability taxonomy."""
        from app.core.enums import Severity, VulnerabilityCategory

        taxonomy = VulnerabilityTaxonomy(**sample_cve_taxonomy)

        assert taxonomy.category == VulnerabilityCategory.INJECTION
        assert taxonomy.cve_id == "CVE-2021-44228"
        assert taxonomy.base_severity == Severity.CRITICAL
        assert "Log4j" in taxonomy.name

    def test_vulnerability_taxonomy_creation_mitre(self, sample_mitre_taxonomy):
        """Test creating MITRE ATT&CK vulnerability taxonomy."""
        from app.core.enums import MITREATLASTactic, VulnerabilityCategory

        taxonomy = VulnerabilityTaxonomy(**sample_mitre_taxonomy)

        assert taxonomy.category == VulnerabilityCategory.INJECTION
        assert taxonomy.atlas_technique == "T1059.001"
        assert taxonomy.atlas_tactic == MITREATLASTactic.EXECUTION
        assert "PowerShell" in taxonomy.name

    def test_vulnerability_taxonomy_validation_required_fields(self):
        """Test validation of required fields."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        # SQLAlchemy models don't raise TypeError - they create incomplete objects
        taxonomy_empty = VulnerabilityTaxonomy()
        assert taxonomy_empty.name is None  # Required fields are None until set

        # Test with minimal required fields
        taxonomy = VulnerabilityTaxonomy(
            name="Test Vulnerability",
            category=VulnerabilityCategory.INJECTION,
            description="Test description",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.MEDIUM,
        )
        assert taxonomy.category == VulnerabilityCategory.INJECTION
        # SQLAlchemy defaults are applied at database level, not object creation
        assert taxonomy.exploitability_score == 0.0 or taxonomy.exploitability_score is None
        assert taxonomy.impact_score == 0.0 or taxonomy.impact_score is None

    def test_vulnerability_taxonomy_validation_category(self):
        """Test validation of category field."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        valid_categories = [
            VulnerabilityCategory.INJECTION,
            VulnerabilityCategory.AUTHENTICATION,
            VulnerabilityCategory.AUTHORIZATION,
            VulnerabilityCategory.DATA_EXPOSURE,
        ]

        for category in valid_categories:
            taxonomy = VulnerabilityTaxonomy(
                name="Test Vulnerability",
                category=category,
                description="Test description",
                attack_vector=AttackVector.NETWORK,
                base_severity=Severity.MEDIUM,
            )
            assert taxonomy.category == category

    def test_vulnerability_taxonomy_validation_severity_range(self):
        """Test validation of severity levels."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        # Valid severities
        valid_severities = [Severity.INFO, Severity.LOW, Severity.MEDIUM, Severity.HIGH, Severity.CRITICAL]

        for severity in valid_severities:
            taxonomy = VulnerabilityTaxonomy(
                name="Test Vulnerability",
                category=VulnerabilityCategory.INJECTION,
                description="Test description",
                attack_vector=AttackVector.NETWORK,
                base_severity=severity,
            )
            assert taxonomy.base_severity == severity

    def test_vulnerability_taxonomy_unique_cwe_id_constraint(self):
        """Test that cwe_id should be unique (database constraint)."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        # This test validates the model design for uniqueness
        # Database-level uniqueness would be tested in integration tests
        taxonomy1 = VulnerabilityTaxonomy(
            name="XSS Vulnerability 1",
            category=VulnerabilityCategory.INJECTION,
            description="First description",
            cwe_id="CWE-79",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.MEDIUM,
        )

        taxonomy2 = VulnerabilityTaxonomy(
            name="XSS Vulnerability 2",
            category=VulnerabilityCategory.INJECTION,
            description="Second description",
            cwe_id="CWE-79",  # Same ID - should be caught at DB level
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.HIGH,
        )

        # Models can be created, uniqueness enforced at database level
        assert taxonomy1.cwe_id == taxonomy2.cwe_id

    def test_vulnerability_taxonomy_string_representation(self, sample_cwe_taxonomy):
        """Test string representation of vulnerability taxonomy."""
        taxonomy = VulnerabilityTaxonomy(**sample_cwe_taxonomy)
        str_repr = str(taxonomy)

        assert "Cross-site Scripting" in str_repr
        assert "INJECTION" in str_repr or "MEDIUM" in str_repr

    def test_vulnerability_taxonomy_cvss_score_calculation(self):
        """Test CVSS-like score calculation methods."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        taxonomy = VulnerabilityTaxonomy(
            name="Log4j RCE",
            category=VulnerabilityCategory.INJECTION,
            description="Remote code execution",
            cve_id="CVE-2021-44228",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.CRITICAL,
            exploitability_score=3.9,
            impact_score=6.0,
            base_cvss_score=10.0,
        )

        # Test score attributes
        assert taxonomy.base_cvss_score == 10.0
        assert taxonomy.exploitability_score == 3.9
        assert taxonomy.impact_score == 6.0
        assert taxonomy.base_severity == Severity.CRITICAL

    def test_vulnerability_taxonomy_metadata_validation(self):
        """Test validation of metadata fields."""
        from app.core.enums import AttackVector, OWASPLLMCategory, Severity, VulnerabilityCategory

        taxonomy = VulnerabilityTaxonomy(
            name="SQL Injection",
            category=VulnerabilityCategory.INJECTION,
            description="SQL injection vulnerability",
            cwe_id="CWE-89",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.HIGH,
            owasp_id=OWASPLLMCategory.LLM01_PROMPT_INJECTION,
            tags="sql,injection,database",
        )

        assert taxonomy.cwe_id == "CWE-89"
        assert taxonomy.owasp_id == OWASPLLMCategory.LLM01_PROMPT_INJECTION
        assert taxonomy.tags == "sql,injection,database"

    def test_vulnerability_taxonomy_with_optional_fields(self):
        """Test creating taxonomy with optional fields as None."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        taxonomy = VulnerabilityTaxonomy(
            name="Information Exposure",
            category=VulnerabilityCategory.DATA_EXPOSURE,
            description="Information exposure vulnerability",
            cwe_id="CWE-200",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.MEDIUM,
            # Optional fields
            cve_id=None,
            owasp_id=None,
            atlas_technique=None,
            tags=None,
        )

        assert taxonomy.cve_id is None
        assert taxonomy.owasp_id is None
        assert taxonomy.atlas_technique is None
        assert taxonomy.tags is None


class TestTaxonomyMappingModel:
    """Test TaxonomyMapping model for cross-taxonomy relationships."""

    @pytest.fixture
    def sample_cwe_taxonomy(self) -> VulnerabilityTaxonomy:
        """Create sample CWE taxonomy."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        return VulnerabilityTaxonomy(
            id=str(uuid.uuid4()),
            name="Cross-site Scripting",
            category=VulnerabilityCategory.INJECTION,
            description="XSS vulnerability",
            cwe_id="CWE-79",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.MEDIUM,
        )

    @pytest.fixture
    def sample_owasp_taxonomy(self) -> VulnerabilityTaxonomy:
        """Create sample OWASP taxonomy."""
        from app.core.enums import AttackVector, OWASPLLMCategory, Severity, VulnerabilityCategory

        return VulnerabilityTaxonomy(
            id=str(uuid.uuid4()),
            name="Injection",
            category=VulnerabilityCategory.INJECTION,
            description="Injection flaws",
            owasp_id=OWASPLLMCategory.LLM01_PROMPT_INJECTION,
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.HIGH,
        )

    def test_taxonomy_mapping_creation(self, sample_cwe_taxonomy, sample_owasp_taxonomy):
        """Test creating taxonomy mapping between CWE and OWASP."""
        mapping = TaxonomyMapping(
            source_taxonomy_id=sample_cwe_taxonomy.id,
            target_taxonomy_id=sample_owasp_taxonomy.id,
            mapping_confidence=0.95,
            mapping_rationale="CWE-79 (XSS) maps to OWASP A03 (Injection) with high confidence",
        )

        assert mapping.source_taxonomy_id == sample_cwe_taxonomy.id
        assert mapping.target_taxonomy_id == sample_owasp_taxonomy.id
        assert mapping.mapping_confidence == 0.95
        assert "high confidence" in mapping.mapping_rationale

    def test_taxonomy_mapping_validation_confidence_range(self):
        """Test validation of mapping confidence range (0.0 to 1.0)."""
        source_id = str(uuid.uuid4())
        target_id = str(uuid.uuid4())

        # Valid confidence values
        for confidence in [0.0, 0.5, 0.95, 1.0]:
            mapping = TaxonomyMapping(
                source_taxonomy_id=source_id,
                target_taxonomy_id=target_id,
                mapping_confidence=confidence,
                mapping_rationale="Test mapping",
            )
            assert mapping.mapping_confidence == confidence

    def test_taxonomy_mapping_bidirectional_relationships(self, sample_cwe_taxonomy, sample_owasp_taxonomy):
        """Test bidirectional taxonomy mappings."""
        # CWE -> OWASP mapping
        mapping1 = TaxonomyMapping(
            source_taxonomy_id=sample_cwe_taxonomy.id,
            target_taxonomy_id=sample_owasp_taxonomy.id,
            mapping_confidence=0.90,
            mapping_rationale="CWE-79 relates to OWASP A03",
        )

        # OWASP -> CWE mapping (reverse)
        mapping2 = TaxonomyMapping(
            source_taxonomy_id=sample_owasp_taxonomy.id,
            target_taxonomy_id=sample_cwe_taxonomy.id,
            mapping_confidence=0.85,
            mapping_rationale="OWASP A03 encompasses CWE-79",
        )

        assert mapping1.source_taxonomy_id == sample_cwe_taxonomy.id
        assert mapping2.source_taxonomy_id == sample_owasp_taxonomy.id
        assert mapping1.target_taxonomy_id == mapping2.source_taxonomy_id
        assert mapping2.target_taxonomy_id == mapping1.source_taxonomy_id

    def test_taxonomy_mapping_string_representation(self):
        """Test string representation of taxonomy mapping."""
        source_id = str(uuid.uuid4())
        target_id = str(uuid.uuid4())

        mapping = TaxonomyMapping(
            source_taxonomy_id=source_id,
            target_taxonomy_id=target_id,
            mapping_confidence=0.95,
            mapping_rationale="High confidence mapping",
        )

        str_repr = str(mapping)
        assert "0.95" in str_repr or "95%" in str_repr

    def test_taxonomy_mapping_optional_rationale(self):
        """Test taxonomy mapping with optional rationale."""
        mapping = TaxonomyMapping(
            source_taxonomy_id=str(uuid.uuid4()),
            target_taxonomy_id=str(uuid.uuid4()),
            mapping_confidence=0.75,
            mapping_rationale=None,  # Optional field
        )

        assert mapping.mapping_confidence == 0.75
        assert mapping.mapping_rationale is None


class TestVulnerabilityClassificationLogic:
    """Test vulnerability classification and scoring logic."""

    def test_severity_level_classification(self):
        """Test classification of vulnerabilities by severity level."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        # Test severity level enum values
        test_cases = [
            (Severity.INFO, "INFO"),
            (Severity.LOW, "LOW"),
            (Severity.MEDIUM, "MEDIUM"),
            (Severity.HIGH, "HIGH"),
            (Severity.CRITICAL, "CRITICAL"),
        ]

        for severity_enum, expected_level in test_cases:
            # Test that our enum values match expected classification
            taxonomy = VulnerabilityTaxonomy(
                name="Test Vulnerability",
                category=VulnerabilityCategory.INJECTION,
                description="Test description",
                attack_vector=AttackVector.NETWORK,
                base_severity=severity_enum,
            )
            assert taxonomy.base_severity.value == expected_level.lower()

    def _classify_severity_level(self, score: float) -> str:
        """Helper method to classify severity level (would be in actual model)."""
        if score == 0.0:
            return "NONE"
        elif score < 4.0:
            return "LOW"
        elif score < 7.0:
            return "MEDIUM"
        elif score < 9.0:
            return "HIGH"
        else:
            return "CRITICAL"

    def test_taxonomy_type_validation(self):
        """Test validation of supported taxonomy ID fields."""
        from app.core.enums import AttackVector, OWASPLLMCategory, Severity, VulnerabilityCategory

        # Test CWE ID
        taxonomy_cwe = VulnerabilityTaxonomy(
            name="Test CWE",
            category=VulnerabilityCategory.INJECTION,
            description="Test CWE vulnerability",
            cwe_id="CWE-79",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.MEDIUM,
        )
        assert taxonomy_cwe.cwe_id == "CWE-79"

        # Test CVE ID
        taxonomy_cve = VulnerabilityTaxonomy(
            name="Test CVE",
            category=VulnerabilityCategory.INJECTION,
            description="Test CVE vulnerability",
            cve_id="CVE-2021-44228",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.CRITICAL,
        )
        assert taxonomy_cve.cve_id == "CVE-2021-44228"

        # Test OWASP ID
        taxonomy_owasp = VulnerabilityTaxonomy(
            name="Test OWASP",
            category=VulnerabilityCategory.PROMPT_INJECTION,
            description="Test OWASP vulnerability",
            owasp_id=OWASPLLMCategory.LLM01_PROMPT_INJECTION,
            attack_vector=AttackVector.PROMPT,
            base_severity=Severity.HIGH,
        )
        assert taxonomy_owasp.owasp_id == OWASPLLMCategory.LLM01_PROMPT_INJECTION

    def test_taxonomy_id_format_validation(self):
        """Test validation of taxonomy ID formats."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        # Test valid CWE format
        taxonomy_cwe = VulnerabilityTaxonomy(
            name="Cross-site Scripting",
            category=VulnerabilityCategory.INJECTION,
            description="XSS vulnerability",
            cwe_id="CWE-79",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.MEDIUM,
        )
        assert taxonomy_cwe.cwe_id == "CWE-79"
        assert len(taxonomy_cwe.cwe_id) > 0
        assert "CWE" in taxonomy_cwe.cwe_id

        # Test valid CVE format
        taxonomy_cve = VulnerabilityTaxonomy(
            name="Log4j RCE",
            category=VulnerabilityCategory.INJECTION,
            description="Remote code execution",
            cve_id="CVE-2021-44228",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.CRITICAL,
        )
        assert taxonomy_cve.cve_id == "CVE-2021-44228"
        assert len(taxonomy_cve.cve_id) > 0
        assert "CVE" in taxonomy_cve.cve_id

        # Test valid MITRE ATLAS technique format
        taxonomy_atlas = VulnerabilityTaxonomy(
            name="PowerShell Execution",
            category=VulnerabilityCategory.INJECTION,
            description="Command execution via PowerShell",
            atlas_technique="T1059.001",
            attack_vector=AttackVector.LOCAL,
            base_severity=Severity.HIGH,
        )
        assert taxonomy_atlas.atlas_technique == "T1059.001"
        assert len(taxonomy_atlas.atlas_technique) > 0
        assert "T" in taxonomy_atlas.atlas_technique

    def test_cross_taxonomy_correlation(self):
        """Test correlation between different taxonomy types."""
        # Create related vulnerabilities across taxonomies
        from app.core.enums import AttackVector, OWASPLLMCategory, Severity, VulnerabilityCategory

        cwe_xss = VulnerabilityTaxonomy(
            name="Cross-site Scripting",
            category=VulnerabilityCategory.INJECTION,
            description="XSS vulnerability",
            cwe_id="CWE-79",
            owasp_id=OWASPLLMCategory.LLM01_PROMPT_INJECTION,
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.MEDIUM,
        )

        owasp_injection = VulnerabilityTaxonomy(
            name="Injection",
            category=VulnerabilityCategory.INJECTION,
            description="Injection flaws including XSS",
            owasp_id=OWASPLLMCategory.LLM01_PROMPT_INJECTION,
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.HIGH,
        )

        # Test correlation based on OWASP category
        assert cwe_xss.owasp_id == owasp_injection.owasp_id

        # Test severity correlation
        severity_order = {Severity.LOW: 1, Severity.MEDIUM: 2, Severity.HIGH: 3, Severity.CRITICAL: 4}
        assert severity_order[cwe_xss.base_severity] < severity_order[owasp_injection.base_severity]

    def test_vulnerability_risk_assessment(self):
        """Test risk assessment calculation based on taxonomy data."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        high_risk_vuln = VulnerabilityTaxonomy(
            name="Log4j RCE",
            category=VulnerabilityCategory.INJECTION,
            description="Remote code execution",
            cve_id="CVE-2021-44228",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.CRITICAL,
            exploitability_score=3.9,
            impact_score=6.0,
        )

        low_risk_vuln = VulnerabilityTaxonomy(
            name="Information Exposure",
            category=VulnerabilityCategory.DATA_EXPOSURE,
            description="Minor information disclosure",
            cwe_id="CWE-200",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.LOW,
            exploitability_score=1.0,
            impact_score=1.5,
        )

        # Test risk assessment logic
        severity_order = {Severity.LOW: 1, Severity.MEDIUM: 2, Severity.HIGH: 3, Severity.CRITICAL: 4}
        assert severity_order[high_risk_vuln.base_severity] > severity_order[low_risk_vuln.base_severity]
        assert high_risk_vuln.exploitability_score > low_risk_vuln.exploitability_score
        assert high_risk_vuln.impact_score > low_risk_vuln.impact_score


class TestVulnerabilityTaxonomyDataIntegrity:
    """Test data integrity and consistency for vulnerability taxonomies."""

    def test_taxonomy_data_consistency(self):
        """Test consistency between related taxonomy fields."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        high_severity_vuln = VulnerabilityTaxonomy(
            name="Log4Shell",
            category=VulnerabilityCategory.INJECTION,
            description="Critical RCE vulnerability",
            cve_id="CVE-2021-44228",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.CRITICAL,
            exploitability_score=3.9,
            impact_score=6.0,
        )

        # Test that high severity aligns with high impact
        assert high_severity_vuln.base_severity == Severity.CRITICAL
        assert high_severity_vuln.impact_score >= 5.0

    def test_taxonomy_immutability_fields(self):
        """Test that certain taxonomy fields should be immutable after creation."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        taxonomy = VulnerabilityTaxonomy(
            name="Cross-site Scripting",
            category=VulnerabilityCategory.INJECTION,
            description="XSS vulnerability",
            cwe_id="CWE-79",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.MEDIUM,
        )

        original_cwe_id = taxonomy.cwe_id
        original_category = taxonomy.category

        # These fields should typically not change after creation
        assert taxonomy.cwe_id == original_cwe_id
        assert taxonomy.category == original_category

    def test_taxonomy_audit_trail(self):
        """Test audit trail for taxonomy changes."""
        from app.core.enums import AttackVector, Severity, VulnerabilityCategory

        taxonomy = VulnerabilityTaxonomy(
            name="SQL Injection",
            category=VulnerabilityCategory.INJECTION,
            description="SQL injection vulnerability",
            cwe_id="CWE-89",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.HIGH,
        )

        # Test timestamp fields exist (inherited from BaseModelMixin)
        assert hasattr(taxonomy, "created_at")
        assert hasattr(taxonomy, "updated_at")

        # These would be set by the database/ORM
        # In actual usage: assert taxonomy.created_at is not None

    def test_taxonomy_relationship_integrity(self):
        """Test integrity of taxonomy relationships."""
        from app.core.enums import AttackVector, OWASPLLMCategory, Severity, VulnerabilityCategory

        source_taxonomy = VulnerabilityTaxonomy(
            id=str(uuid.uuid4()),
            name="XSS",
            category=VulnerabilityCategory.INJECTION,
            description="Cross-site scripting",
            cwe_id="CWE-79",
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.MEDIUM,
        )

        target_taxonomy = VulnerabilityTaxonomy(
            id=str(uuid.uuid4()),
            name="Injection",
            category=VulnerabilityCategory.INJECTION,
            description="Injection attacks",
            owasp_id=OWASPLLMCategory.LLM01_PROMPT_INJECTION,
            attack_vector=AttackVector.NETWORK,
            base_severity=Severity.HIGH,
        )

        mapping = TaxonomyMapping(
            source_taxonomy_id=source_taxonomy.id,
            target_taxonomy_id=target_taxonomy.id,
            mapping_confidence=0.90,
            mapping_rationale="CWE-79 is a type of injection attack",
        )

        # Test referential integrity
        assert mapping.source_taxonomy_id == source_taxonomy.id
        assert mapping.target_taxonomy_id == target_taxonomy.id
        assert source_taxonomy.id != target_taxonomy.id  # Different entities
