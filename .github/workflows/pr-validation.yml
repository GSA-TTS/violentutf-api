name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  full-quality:
    name: Full Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # For better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies and quality tools
        run: |
          # Install project dependencies first
          pip install -r requirements.txt
          # Install quality tools
          pip install black isort flake8 flake8-docstrings
          pip install bandit safety pylint mypy
          # Install type stubs and runtime dependencies to match pre-commit environment
          pip install types-requests types-redis types-passlib types-bleach types-psutil types-PyYAML
          # Note: FastAPI, SQLAlchemy, etc. already installed from requirements.txt

      - name: Black formatter
        run: black --check --diff . --verbose --exclude "agent_orchestrator|test_env"

      - name: isort
        run: isort --check-only --diff . --profile black --skip-glob="*/agent_orchestrator/*" --skip-glob="*/test_env/*"

      - name: Full flake8 scan
        run: |
          flake8 . --config=.flake8 --count --statistics \
            --exclude=app_data,violentutf_logs,migrations,tools/pre_audit/statistical_analysis,agent_orchestrator,test_env \
            --ignore=E203,W503,E501,F401,F541,E226,D107,D202,D401,D400,D205,D103,D102,D106,C901,D403,E402,E722,F811

      - name: Bandit security scan
        run: |
          # Run Bandit and collect all findings
          bandit -r . -f json -o bandit-report.json \
            -x '/tests/,/app_data/,/violentutf_logs/,/agent_orchestrator/,/test_env/' \
            --skip B101,B601 --exit-zero

          # Analyze results and determine if check should fail
          python3 .github/scripts/analyze-bandit-report.py

      # Upload Bandit report as artifact for review
      - name: Upload Bandit Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

      - name: Type checking
        run: mypy . --ignore-missing-imports --strict --no-error-summary --no-pretty --exclude 'docs' --exclude 'agent_orchestrator' --exclude 'venv' --exclude 'test_env' --exclude 'tests' --exclude 'alembic' --exclude 'backups'

      - name: Dependency vulnerabilities
        run: |
          # Run safety check
          safety check --json --output safety-report.json || echo "Safety check completed with findings"

          # Analyze results and determine if check should fail
          python3 .github/scripts/analyze-safety-report.py

      # Upload Safety report as artifact for review
      - name: Upload Safety Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-vulnerabilities-report
          path: safety-report.json
          retention-days: 30

  test-matrix:
    name: Unit Tests - Ubuntu / Py3.12
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          # Install dependencies from requirements.txt
          pip install -r requirements.txt
          # Install the package in editable mode
          pip install -e .
          pip install pytest pytest-cov pytest-xdist pytest-timeout pytest-asyncio  # Test dependencies

      - name: Run tests
        run: |
          pytest tests/unit/ -v --cov=app \
            --cov-report=xml --timeout=300 -n auto

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml

  api-validation:
    name: API Contract Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft == false

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install API test deps
        run: |
          # Install dependencies from requirements.txt first
          pip install -r requirements.txt
          # Install the package in editable mode
          pip install -e .
          pip install pytest pytest-asyncio httpx pytest-cov
          pip install jsonschema openapi-spec-validator

      - name: Run contract tests
        env:
          CONTRACT_TESTING: "true"
          TESTING: "true"
        run: |
          pytest tests/contract/ -v -m "contract" \
            --tb=short --maxfail=3

  docker-check:
    name: Docker Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Dockerfile
        run: |
          # Install hadolint
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint

          find . -name "Dockerfile*" -type f -not -path "./agent_orchestrator/*" -not -path "./test_env/*" | while read df; do
            echo "Linting $df"
            ./hadolint "$df"
          done

      - name: Build test image
        run: |
          if [ -f Dockerfile ]; then
            docker build -t violentutf-api:test . --target test
          else
            echo "No Dockerfile found, skipping Docker build"
          fi

  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v5

      - name: Test docker-compose configuration
        run: |
          # Validate docker-compose test configuration per ADR-012
          docker compose -f docker-compose.test.yml config > /dev/null
          echo "✅ docker-compose.test.yml is valid"

          # Validate production configuration exists
          docker compose -f docker-compose.yml config > /dev/null
          echo "✅ docker-compose.yml is valid"

          echo "✅ Docker-compose test integration validated per ADR-012"

  pr-summary:
    name: PR Summary
    needs: [full-quality, test-matrix, api-validation, docker-check, docker-compose-test]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Code Quality': '${{ needs.full-quality.result }}',
              'Unit Tests': '${{ needs.test-matrix.result }}',
              'API Validation': '${{ needs.api-validation.result }}',
              'Docker Build': '${{ needs.docker-check.result }}',
              'Docker Compose Test': '${{ needs.docker-compose-test.result }}'
            };

            let comment = '## PR Validation Results\n\n';
            for (const [check, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '✅' : '❌';
              comment += `${emoji} **${check}**: ${result}\n`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
