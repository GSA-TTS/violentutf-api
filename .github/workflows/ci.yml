name: CI - Quick Checks

on:
  push:
    branches: [main, develop, 'dev_*']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quick-quality:
    name: Quick Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install minimal tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8

      - name: Black format check
        run: black --check --diff . --exclude agent_orchestrator

      - name: Import sort check
        run: isort --check-only --diff . --skip-glob="*/agent_orchestrator/*"

      - name: Critical flake8 errors only
        run: |
          # Only critical errors that prevent execution
          flake8 . --count --select=E9,F63,F7,F82,F841 --show-source --statistics --exclude=agent_orchestrator

  unit-tests:
    name: Core Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run fast unit tests
        run: |
          pytest tests/unit/ -v --tb=short --maxfail=50 \
            -m "not slow and not integration and not docker" \
            --timeout=60

  syntax-check:
    name: Config Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Validate YAML
        run: |
          pip install yamllint
          yamllint -d relaxed .github/workflows/*.yml

      - name: Validate JSON
        run: |
          echo "Validating JSON files..."
          invalid_files=""
          find . -name "*.json" -type f | while read file; do
            echo "Checking $file"
            if ! python -m json.tool "$file" > /dev/null; then
              echo "❌ Invalid JSON: $file"
              invalid_files="$invalid_files $file"
            fi
          done
          if [ -n "$invalid_files" ]; then
            echo "❌ Found invalid JSON files: $invalid_files"
            exit 1
          fi
          echo "✅ All JSON files are valid"
