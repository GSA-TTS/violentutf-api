"""Initial database models with comprehensive audit system.

Revision ID: 0d9d1d5fbe10
Revises:
Create Date: 2025-07-25 12:04:56.827442

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy import Text
from sqlalchemy.dialects import postgresql

import alembic.op as op

# revision identifiers, used by Alembic.
revision: str = "0d9d1d5fbe10"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "audit_log",
        sa.Column(
            "action",
            sa.String(length=100),
            nullable=False,
            comment="Action performed (e.g., 'user.create', 'api_key.delete')",
        ),
        sa.Column(
            "resource_type",
            sa.String(length=100),
            nullable=False,
            comment="Type of resource affected (e.g., 'user', 'api_key')",
        ),
        sa.Column(
            "resource_id",
            sa.String(length=255),
            nullable=True,
            comment="ID of the affected resource",
        ),
        sa.Column(
            "user_id",
            sa.String(length=36),
            nullable=True,
            comment="User who performed the action (null for system actions)",
        ),
        sa.Column(
            "user_email",
            sa.String(length=254),
            nullable=True,
            comment="Email of user at time of action (denormalized for history)",
        ),
        sa.Column(
            "ip_address",
            sa.String(length=45),
            nullable=True,
            comment="IP address of the request",
        ),
        sa.Column(
            "user_agent",
            sa.String(length=500),
            nullable=True,
            comment="User agent string from the request",
        ),
        sa.Column(
            "changes",
            sa.TEXT(),
            nullable=True,
            comment="JSON string with before/after values for updates",
        ),
        sa.Column(
            "action_metadata",
            sa.TEXT(),
            nullable=True,
            comment="Additional context or metadata about the action",
        ),
        sa.Column(
            "status",
            sa.String(length=20),
            server_default="success",
            nullable=False,
            comment="Result status: success, failure, error",
        ),
        sa.Column(
            "error_message",
            sa.String(length=1000),
            nullable=True,
            comment="Error message if action failed",
        ),
        sa.Column(
            "duration_ms",
            sa.Integer(),
            nullable=True,
            comment="Duration of the action in milliseconds",
        ),
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("created_by", sa.String(length=255), server_default="system", nullable=False),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated_by", sa.String(length=255), server_default="system", nullable=False),
        sa.Column("version", sa.Integer(), server_default="1", nullable=False),
        sa.PrimaryKeyConstraint("id"),
        comment="Immutable audit trail of all system actions",
    )
    op.create_index("idx_audit_log_created", "audit_log", ["created_at", "created_by"], unique=False)
    op.create_index("idx_audit_log_updated", "audit_log", ["updated_at", "updated_by"], unique=False)
    op.create_index("idx_audit_log_version", "audit_log", ["version"], unique=False)
    op.create_index(
        "idx_auditlog_resource",
        "audit_log",
        ["resource_type", "resource_id"],
        unique=False,
    )
    op.create_index("idx_auditlog_status", "audit_log", ["status", "created_at"], unique=False)
    op.create_index("idx_auditlog_timestamp", "audit_log", ["created_at"], unique=False)
    op.create_index("idx_auditlog_user_action", "audit_log", ["user_id", "action"], unique=False)
    op.create_index(op.f("ix_audit_log_action"), "audit_log", ["action"], unique=False)
    op.create_index(op.f("ix_audit_log_ip_address"), "audit_log", ["ip_address"], unique=False)
    op.create_index(op.f("ix_audit_log_resource_id"), "audit_log", ["resource_id"], unique=False)
    op.create_index(op.f("ix_audit_log_resource_type"), "audit_log", ["resource_type"], unique=False)
    op.create_index(op.f("ix_audit_log_user_id"), "audit_log", ["user_id"], unique=False)
    op.create_table(
        "user",
        sa.Column(
            "username",
            sa.String(length=100),
            nullable=False,
            comment="Unique username for login",
        ),
        sa.Column("email", sa.String(length=254), nullable=False, comment="User email address"),
        sa.Column(
            "password_hash",
            sa.String(length=255),
            nullable=False,
            comment="Argon2 password hash",
        ),
        sa.Column(
            "full_name",
            sa.String(length=255),
            nullable=True,
            comment="User's full display name",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            server_default="true",
            nullable=False,
            comment="Whether the user account is active",
        ),
        sa.Column(
            "is_superuser",
            sa.Boolean(),
            server_default="false",
            nullable=False,
            comment="Whether the user has administrative privileges",
        ),
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("created_by", sa.String(length=255), server_default="system", nullable=False),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated_by", sa.String(length=255), server_default="system", nullable=False),
        sa.Column("version", sa.Integer(), server_default="1", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by", sa.String(length=255), nullable=True),
        sa.Column("owner_id", sa.String(length=255), nullable=True),
        sa.Column("organization_id", sa.String(length=36), nullable=True),
        sa.Column(
            "access_level",
            sa.String(length=50),
            server_default="private",
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email", "is_deleted", name="uq_user_email_active"),
        sa.UniqueConstraint("username", "is_deleted", name="uq_user_username_active"),
        comment="User accounts with authentication and authorization",
    )
    op.create_index("idx_user_access", "user", ["access_level", "owner_id"], unique=False)
    op.create_index("idx_user_active", "user", ["created_at"], unique=False)
    op.create_index("idx_user_created", "user", ["created_at", "created_by"], unique=False)
    op.create_index("idx_user_owner", "user", ["owner_id", "organization_id"], unique=False)
    op.create_index("idx_user_updated", "user", ["updated_at", "updated_by"], unique=False)
    op.create_index("idx_user_version", "user", ["version"], unique=False)
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_organization_id"), "user", ["organization_id"], unique=False)
    op.create_index(op.f("ix_user_owner_id"), "user", ["owner_id"], unique=False)
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    op.create_table(
        "api_key",
        sa.Column(
            "key_hash",
            sa.String(length=255),
            nullable=False,
            comment="SHA256 hash of the API key",
        ),
        sa.Column(
            "name",
            sa.String(length=255),
            nullable=False,
            comment="Descriptive name for the API key",
        ),
        sa.Column(
            "description",
            sa.String(length=1000),
            nullable=True,
            comment="Detailed description of key purpose",
        ),
        sa.Column(
            "key_prefix",
            sa.String(length=10),
            nullable=False,
            comment="First few characters of key for identification",
        ),
        sa.Column(
            "permissions",
            sa.TEXT(),
            server_default=sa.text("'{}'"),
            nullable=False,
            comment="JSON string containing permission scopes",
        ),
        sa.Column(
            "last_used_at",
            sa.DateTime(),
            nullable=True,
            comment="Last time this key was used",
        ),
        sa.Column(
            "last_used_ip",
            sa.String(length=45),
            nullable=True,
            comment="IP address from last use (supports IPv6)",
        ),
        sa.Column(
            "usage_count",
            sa.Integer(),
            server_default="0",
            nullable=False,
            comment="Number of times key has been used",
        ),
        sa.Column(
            "expires_at",
            sa.DateTime(),
            nullable=True,
            comment="Optional expiration timestamp",
        ),
        sa.Column(
            "user_id",
            sa.String(length=36),
            nullable=False,
            comment="User who owns this API key",
        ),
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("created_by", sa.String(length=255), server_default="system", nullable=False),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated_by", sa.String(length=255), server_default="system", nullable=False),
        sa.Column("version", sa.Integer(), server_default="1", nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by", sa.String(length=255), nullable=True),
        sa.Column("owner_id", sa.String(length=255), nullable=True),
        sa.Column("organization_id", sa.String(length=36), nullable=True),
        sa.Column(
            "access_level",
            sa.String(length=50),
            server_default="private",
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "user_id", "is_deleted", name="uq_apikey_name_user"),
        comment="API keys for authentication with granular permissions",
    )
    op.create_index("idx_api_key_access", "api_key", ["access_level", "owner_id"], unique=False)
    op.create_index("idx_api_key_active", "api_key", ["created_at"], unique=False)
    op.create_index("idx_api_key_created", "api_key", ["created_at", "created_by"], unique=False)
    op.create_index("idx_api_key_owner", "api_key", ["owner_id", "organization_id"], unique=False)
    op.create_index("idx_api_key_updated", "api_key", ["updated_at", "updated_by"], unique=False)
    op.create_index("idx_api_key_version", "api_key", ["version"], unique=False)
    op.create_index("idx_apikey_expires", "api_key", ["expires_at"], unique=False)
    op.create_index("idx_apikey_user_active", "api_key", ["user_id", "is_deleted"], unique=False)
    op.create_index(op.f("ix_api_key_expires_at"), "api_key", ["expires_at"], unique=False)
    op.create_index(op.f("ix_api_key_key_hash"), "api_key", ["key_hash"], unique=True)
    op.create_index(op.f("ix_api_key_key_prefix"), "api_key", ["key_prefix"], unique=False)
    op.create_index(op.f("ix_api_key_last_used_at"), "api_key", ["last_used_at"], unique=False)
    op.create_index(op.f("ix_api_key_organization_id"), "api_key", ["organization_id"], unique=False)
    op.create_index(op.f("ix_api_key_owner_id"), "api_key", ["owner_id"], unique=False)
    op.create_index(op.f("ix_api_key_user_id"), "api_key", ["user_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_api_key_user_id"), table_name="api_key")
    op.drop_index(op.f("ix_api_key_owner_id"), table_name="api_key")
    op.drop_index(op.f("ix_api_key_organization_id"), table_name="api_key")
    op.drop_index(op.f("ix_api_key_last_used_at"), table_name="api_key")
    op.drop_index(op.f("ix_api_key_key_prefix"), table_name="api_key")
    op.drop_index(op.f("ix_api_key_key_hash"), table_name="api_key")
    op.drop_index(op.f("ix_api_key_expires_at"), table_name="api_key")
    op.drop_index("idx_apikey_user_active", table_name="api_key")
    op.drop_index("idx_apikey_expires", table_name="api_key")
    op.drop_index("idx_api_key_version", table_name="api_key")
    op.drop_index("idx_api_key_updated", table_name="api_key")
    op.drop_index("idx_api_key_owner", table_name="api_key")
    op.drop_index("idx_api_key_created", table_name="api_key")
    op.drop_index("idx_api_key_active", table_name="api_key")
    op.drop_index("idx_api_key_access", table_name="api_key")
    op.drop_table("api_key")
    op.drop_index(op.f("ix_user_username"), table_name="user")
    op.drop_index(op.f("ix_user_owner_id"), table_name="user")
    op.drop_index(op.f("ix_user_organization_id"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_index("idx_user_version", table_name="user")
    op.drop_index("idx_user_updated", table_name="user")
    op.drop_index("idx_user_owner", table_name="user")
    op.drop_index("idx_user_created", table_name="user")
    op.drop_index("idx_user_active", table_name="user")
    op.drop_index("idx_user_access", table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_audit_log_user_id"), table_name="audit_log")
    op.drop_index(op.f("ix_audit_log_resource_type"), table_name="audit_log")
    op.drop_index(op.f("ix_audit_log_resource_id"), table_name="audit_log")
    op.drop_index(op.f("ix_audit_log_ip_address"), table_name="audit_log")
    op.drop_index(op.f("ix_audit_log_action"), table_name="audit_log")
    op.drop_index("idx_auditlog_user_action", table_name="audit_log")
    op.drop_index("idx_auditlog_timestamp", table_name="audit_log")
    op.drop_index("idx_auditlog_status", table_name="audit_log")
    op.drop_index("idx_auditlog_resource", table_name="audit_log")
    op.drop_index("idx_audit_log_version", table_name="audit_log")
    op.drop_index("idx_audit_log_updated", table_name="audit_log")
    op.drop_index("idx_audit_log_created", table_name="audit_log")
    op.drop_table("audit_log")
    # ### end Alembic commands ###
