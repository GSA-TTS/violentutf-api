"""Add vulnerability management tables

Revision ID: add_vulnerability_management_tables
Revises: 41eb10f48a60
Create Date: 2025-08-07 18:56:15.000000

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "add_vulnerability_management_tables"
down_revision: Union[str, Sequence[str], None] = "41eb10f48a60"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Create vulnerability management tables."""

    # Create vulnerability_taxonomies table
    op.create_table(
        "vulnerability_taxonomies",
        sa.Column("id", sa.String, primary_key=True),
        sa.Column("name", sa.String(200), nullable=False, index=True),
        sa.Column(
            "category",
            sa.Enum(
                "injection",
                "authentication",
                "authorization",
                "data_exposure",
                "cryptographic",
                "configuration",
                "prompt_injection",
                "insecure_output",
                "training_data_poisoning",
                "model_dos",
                "supply_chain",
                "sensitive_disclosure",
                "insecure_plugins",
                "excessive_agency",
                "overreliance",
                "model_theft",
                "adversarial_ml",
                "data_manipulation",
                "model_manipulation",
                "inference_attacks",
                name="vulnerabilitycategory",
            ),
            nullable=False,
            index=True,
        ),
        sa.Column("description", sa.Text, nullable=True),
        # Industry standard mappings
        sa.Column("cwe_id", sa.String(20), nullable=True, index=True),
        sa.Column("cve_id", sa.String(20), nullable=True, index=True),
        sa.Column(
            "owasp_id",
            sa.Enum(
                "LLM01",
                "LLM02",
                "LLM03",
                "LLM04",
                "LLM05",
                "LLM06",
                "LLM07",
                "LLM08",
                "LLM09",
                "LLM10",
                name="owaspllmcategory",
            ),
            nullable=True,
            index=True,
        ),
        sa.Column("atlas_technique", sa.String(20), nullable=True, index=True),
        sa.Column(
            "atlas_tactic",
            sa.Enum(
                "reconnaissance",
                "resource_development",
                "initial_access",
                "model_access",
                "execution",
                "persistence",
                "defense_evasion",
                "discovery",
                "collection",
                "ml_attack_staging",
                "exfiltration",
                "impact",
                name="mitreatlasTactic",
            ),
            nullable=True,
            index=True,
        ),
        # AI/ML specific attributes
        sa.Column("is_ai_specific", sa.Boolean, default=False, index=True),
        sa.Column(
            "attack_vector",
            sa.Enum(
                "network",
                "adjacent",
                "local",
                "physical",
                "prompt",
                "model",
                "training_data",
                "inference",
                "api",
                "web_application",
                "social_engineering",
                "supply_chain",
                name="attackvector",
            ),
            nullable=False,
            index=True,
        ),
        sa.Column("ai_model_types", sa.Text, nullable=True),
        # Risk assessment parameters
        sa.Column(
            "base_severity",
            sa.Enum("critical", "high", "medium", "low", "info", name="severity"),
            nullable=False,
            index=True,
        ),
        sa.Column("exploitability_score", sa.Float, nullable=False, default=0.0),
        sa.Column("impact_score", sa.Float, nullable=False, default=0.0),
        sa.Column("base_cvss_score", sa.Float, nullable=True),
        # Detection and remediation guidance
        sa.Column("detection_methods", sa.Text, nullable=True),
        sa.Column("remediation_guidance", sa.Text, nullable=True),
        sa.Column("prevention_measures", sa.Text, nullable=True),
        # Metadata
        sa.Column("reference_urls", sa.Text, nullable=True),
        sa.Column("tags", sa.String(500), nullable=True),
        sa.Column("is_active", sa.Boolean, default=True, index=True),
        # Audit fields
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by", sa.String, nullable=True),
        sa.Column("updated_by", sa.String, nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_deleted", sa.Boolean, default=False, index=True),
    )

    # Create security_scans table
    op.create_table(
        "security_scans",
        sa.Column("id", sa.String, primary_key=True),
        sa.Column("name", sa.String(200), nullable=False, index=True),
        sa.Column(
            "scan_type",
            sa.Enum(
                "pyrit",
                "garak",
                "static_analysis",
                "dynamic_analysis",
                "penetration_test",
                "code_review",
                "architecture_review",
                "owasp_llm",
                "mitre_atlas",
                "nist_ai_rmf",
                name="scantype",
            ),
            nullable=False,
            index=True,
        ),
        sa.Column("description", sa.Text, nullable=True),
        # Scan configuration
        sa.Column("target", sa.String(500), nullable=False),
        sa.Column("configuration", postgresql.JSON, nullable=True),
        sa.Column("scan_parameters", sa.Text, nullable=True),
        # Execution context
        sa.Column("initiated_by", sa.String(100), nullable=False, index=True),
        sa.Column("tool_version", sa.String(50), nullable=True),
        sa.Column("scanner_host", sa.String(100), nullable=True),
        # Timeline and status
        sa.Column(
            "status",
            sa.Enum(
                "pending",
                "running",
                "completed",
                "failed",
                "cancelled",
                "timeout",
                name="scanstatus",
            ),
            nullable=False,
            default="pending",
            index=True,
        ),
        sa.Column("scheduled_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        # Performance metrics
        sa.Column("duration_seconds", sa.Integer, nullable=True),
        sa.Column("timeout_seconds", sa.Integer, nullable=True, default=3600),
        # Results summary
        sa.Column("total_findings", sa.Integer, nullable=False, default=0, index=True),
        sa.Column("critical_findings", sa.Integer, nullable=False, default=0),
        sa.Column("high_findings", sa.Integer, nullable=False, default=0),
        sa.Column("medium_findings", sa.Integer, nullable=False, default=0),
        sa.Column("low_findings", sa.Integer, nullable=False, default=0),
        sa.Column("info_findings", sa.Integer, nullable=False, default=0),
        # Quality metrics
        sa.Column("false_positive_rate", sa.Float, nullable=True),
        sa.Column("coverage_percentage", sa.Float, nullable=True),
        sa.Column("confidence_score", sa.Float, nullable=True),
        # Error handling
        sa.Column("error_message", sa.Text, nullable=True),
        sa.Column("warning_messages", sa.Text, nullable=True),
        # Output and artifacts
        sa.Column("raw_output", sa.Text, nullable=True),
        sa.Column("report_path", sa.String(1000), nullable=True),
        sa.Column("artifacts", postgresql.JSON, nullable=True),
        # AI/ML specific fields
        sa.Column("ai_models_tested", sa.Text, nullable=True),
        sa.Column("prompt_categories", sa.Text, nullable=True),
        sa.Column("attack_techniques", sa.Text, nullable=True),
        # Integration and automation
        sa.Column("pipeline_id", sa.String(100), nullable=True, index=True),
        sa.Column("trigger_event", sa.String(100), nullable=True),
        sa.Column("parent_scan_id", sa.String, nullable=True, index=True),
        # Compliance and reporting
        sa.Column("compliance_frameworks", sa.Text, nullable=True),
        sa.Column("report_recipients", sa.Text, nullable=True),
        # Metadata
        sa.Column("tags", sa.String(500), nullable=True),
        sa.Column("notes", sa.Text, nullable=True),
        sa.Column("is_baseline", sa.Boolean, default=False, index=True),
        # Audit fields
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by", sa.String, nullable=True),
        sa.Column("updated_by", sa.String, nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_deleted", sa.Boolean, default=False, index=True),
    )

    # Create vulnerability_findings table
    op.create_table(
        "vulnerability_findings",
        sa.Column("id", sa.String, primary_key=True),
        sa.Column(
            "taxonomy_id",
            sa.String,
            sa.ForeignKey("vulnerability_taxonomies.id"),
            nullable=True,
            index=True,
        ),
        sa.Column(
            "scan_id",
            sa.String,
            sa.ForeignKey("security_scans.id"),
            nullable=True,
            index=True,
        ),
        # Basic information
        sa.Column("title", sa.String(300), nullable=False, index=True),
        sa.Column("description", sa.Text, nullable=True),
        # Discovery context
        sa.Column("discovered_at", sa.DateTime(timezone=True), nullable=False, index=True),
        sa.Column("discovered_by", sa.String(100), nullable=False, index=True),
        sa.Column("discovery_method", sa.String(50), nullable=False, index=True),
        # Location and context
        sa.Column("affected_component", sa.String(200), nullable=True, index=True),
        sa.Column("affected_endpoint", sa.String(500), nullable=True),
        sa.Column("affected_parameter", sa.String(200), nullable=True),
        sa.Column("file_path", sa.String(1000), nullable=True),
        sa.Column("line_number", sa.Integer, nullable=True),
        # Evidence and proof of concept
        sa.Column("evidence", postgresql.JSON, nullable=True),
        sa.Column("proof_of_concept", sa.Text, nullable=True),
        sa.Column("reproduction_steps", sa.Text, nullable=True),
        # Risk assessment
        sa.Column(
            "severity",
            sa.Enum("critical", "high", "medium", "low", "info", name="severity"),
            nullable=False,
            index=True,
        ),
        sa.Column(
            "risk_rating",
            sa.Enum(
                "critical_risk",
                "high_risk",
                "medium_risk",
                "low_risk",
                "minimal_risk",
                name="riskrating",
            ),
            nullable=False,
            index=True,
        ),
        sa.Column("cvss_score", sa.Float, nullable=True),
        sa.Column("cvss_vector", sa.String(200), nullable=True),
        sa.Column("exploitability", sa.Float, nullable=True),
        sa.Column("impact_rating", sa.Float, nullable=True),
        # Business context
        sa.Column("business_impact", sa.Text, nullable=True),
        sa.Column("affected_users", sa.String(200), nullable=True),
        sa.Column("data_at_risk", sa.Text, nullable=True),
        sa.Column("compliance_impact", sa.Text, nullable=True),
        # Status and workflow
        sa.Column(
            "status",
            sa.Enum(
                "new",
                "confirmed",
                "in_progress",
                "resolved",
                "false_positive",
                "accepted_risk",
                "reopen",
                name="vulnerabilitystatus",
            ),
            nullable=False,
            default="new",
            index=True,
        ),
        sa.Column("verification_status", sa.String(50), nullable=True, index=True),
        sa.Column("remediation_status", sa.String(50), nullable=True, index=True),
        sa.Column("false_positive_reason", sa.Text, nullable=True),
        # Assignment and ownership
        sa.Column(
            "assigned_to",
            sa.String,
            sa.ForeignKey("user.id"),
            nullable=True,
            index=True,
        ),
        sa.Column("remediation_owner", sa.String(100), nullable=True),
        # Timeline and SLAs
        sa.Column("first_seen", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_seen", sa.DateTime(timezone=True), nullable=True, index=True),
        sa.Column("verified_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "remediation_deadline",
            sa.DateTime(timezone=True),
            nullable=True,
            index=True,
        ),
        sa.Column("resolved_at", sa.DateTime(timezone=True), nullable=True),
        # Remediation information
        sa.Column("remediation_plan", sa.Text, nullable=True),
        sa.Column("remediation_effort", sa.String(50), nullable=True),
        sa.Column("remediation_notes", sa.Text, nullable=True),
        sa.Column("fix_version", sa.String(100), nullable=True),
        # AI/ML specific fields
        sa.Column("ai_model_affected", sa.String(200), nullable=True),
        sa.Column("prompt_pattern", sa.Text, nullable=True),
        sa.Column("model_output", sa.Text, nullable=True),
        sa.Column("attack_scenario", sa.Text, nullable=True),
        # Classification override
        sa.Column("custom_classification", sa.String(100), nullable=True),
        sa.Column("classification_confidence", sa.Float, nullable=True),
        # Metadata
        sa.Column("external_id", sa.String(100), nullable=True, index=True),
        sa.Column("tags", sa.String(500), nullable=True),
        sa.Column("notes", sa.Text, nullable=True),
        # Audit fields
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_by", sa.String, nullable=True),
        sa.Column("updated_by", sa.String, nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_deleted", sa.Boolean, default=False, index=True),
    )

    # Create performance indexes
    op.create_index(
        "idx_taxonomy_category_severity",
        "vulnerability_taxonomies",
        ["category", "base_severity"],
    )
    op.create_index(
        "idx_taxonomy_ai_specific",
        "vulnerability_taxonomies",
        ["is_ai_specific", "category"],
    )
    op.create_index(
        "idx_taxonomy_owasp_atlas",
        "vulnerability_taxonomies",
        ["owasp_id", "atlas_technique"],
    )
    op.create_index(
        "idx_taxonomy_active_lookup",
        "vulnerability_taxonomies",
        ["is_active", "category", "base_severity"],
    )

    op.create_index("idx_scan_type_status", "security_scans", ["scan_type", "status"])
    op.create_index("idx_scan_timeline", "security_scans", ["started_at", "completed_at"])
    op.create_index(
        "idx_scan_findings_summary",
        "security_scans",
        ["total_findings", "critical_findings"],
    )
    op.create_index("idx_scan_initiator_type", "security_scans", ["initiated_by", "scan_type"])
    op.create_index("idx_scan_target_type", "security_scans", ["target", "scan_type"])
    op.create_index("idx_scan_pipeline", "security_scans", ["pipeline_id", "trigger_event"])
    op.create_index(
        "idx_scan_baseline_comparison",
        "security_scans",
        ["is_baseline", "scan_type", "target"],
    )

    op.create_index("idx_finding_status_severity", "vulnerability_findings", ["status", "severity"])
    op.create_index(
        "idx_finding_discovery_timeline",
        "vulnerability_findings",
        ["discovered_at", "status"],
    )
    op.create_index(
        "idx_finding_component_severity",
        "vulnerability_findings",
        ["affected_component", "severity"],
    )
    op.create_index("idx_finding_assignment", "vulnerability_findings", ["assigned_to", "status"])
    op.create_index(
        "idx_finding_remediation_deadline",
        "vulnerability_findings",
        ["remediation_deadline", "status"],
    )
    op.create_index(
        "idx_finding_scan_taxonomy",
        "vulnerability_findings",
        ["scan_id", "taxonomy_id"],
    )
    op.create_index(
        "idx_finding_last_seen_active",
        "vulnerability_findings",
        ["last_seen", "status"],
    )
    op.create_index(
        "idx_finding_ai_specific",
        "vulnerability_findings",
        ["ai_model_affected", "severity"],
    )


def downgrade() -> None:
    """Drop vulnerability management tables."""

    # Drop indexes
    op.drop_index("idx_finding_ai_specific")
    op.drop_index("idx_finding_last_seen_active")
    op.drop_index("idx_finding_scan_taxonomy")
    op.drop_index("idx_finding_remediation_deadline")
    op.drop_index("idx_finding_assignment")
    op.drop_index("idx_finding_component_severity")
    op.drop_index("idx_finding_discovery_timeline")
    op.drop_index("idx_finding_status_severity")

    op.drop_index("idx_scan_baseline_comparison")
    op.drop_index("idx_scan_pipeline")
    op.drop_index("idx_scan_target_type")
    op.drop_index("idx_scan_initiator_type")
    op.drop_index("idx_scan_findings_summary")
    op.drop_index("idx_scan_timeline")
    op.drop_index("idx_scan_type_status")

    op.drop_index("idx_taxonomy_active_lookup")
    op.drop_index("idx_taxonomy_owasp_atlas")
    op.drop_index("idx_taxonomy_ai_specific")
    op.drop_index("idx_taxonomy_category_severity")

    # Drop tables
    op.drop_table("vulnerability_findings")
    op.drop_table("security_scans")
    op.drop_table("vulnerability_taxonomies")

    # Drop enums
    op.execute("DROP TYPE IF EXISTS vulnerabilitystatus")
    op.execute("DROP TYPE IF EXISTS riskrating")
    op.execute("DROP TYPE IF EXISTS scanstatus")
    op.execute("DROP TYPE IF EXISTS scantype")
    op.execute("DROP TYPE IF EXISTS mitreatlasTactic")
    op.execute("DROP TYPE IF EXISTS owaspllmcategory")
    op.execute("DROP TYPE IF EXISTS attackvector")
    op.execute("DROP TYPE IF EXISTS severity")
    op.execute("DROP TYPE IF EXISTS vulnerabilitycategory")
