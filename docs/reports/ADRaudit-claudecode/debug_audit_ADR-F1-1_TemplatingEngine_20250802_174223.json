{
  "audit_metadata": {
    "repository_path": ".",
    "adr_path": "docs/architecture/ADRs",
    "analysis_timestamp": "2025-08-02T21:42:23.581943+00:00",
    "execution_time_seconds": 201.34903287887573,
    "mode": "debug_single_adr",
    "selected_adr": "ADR-F1-1_TemplatingEngine",
    "total_adrs_discovered": 21,
    "analyzed_adrs": 1
  },
  "overall_compliance_score": 0.0,
  "discovered_adrs": [
    {
      "adr_id": "ADR-011_HistoricalCodeAnalysis",
      "title": "ADR-011: Historical Code Analysis for ADR Compliance Auditing",
      "file_path": "docs/architecture/ADRs/ADR-011_HistoricalCodeAnalysis.md",
      "requirements": [
        "This decision establishes a systematic, automated approach to ADR compliance auditing that scales with the growing complexity of the ViolentUTF API architecture. The Historical Code Analysis Tool addresses critical audit team needs while maintaining security, performance, and operational requirements.",
        "2. **Configurable Detection**: YAML-based patterns adapt to evolving ADR requirements"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-007_AsyncTaskProcessing",
      "title": "ADR-007: Asynchronous Task Processing with HTTP Polling and Webhooks",
      "file_path": "docs/architecture/ADRs/ADR-007_AsyncTaskProcessing.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-004_Versioning",
      "title": "ADR-004: URI Path Versioning Strategy",
      "file_path": "docs/architecture/ADRs/ADR-004_Versioning.md",
      "requirements": [
        "Non-breaking, backward-compatible changes (e.g., adding a new optional field to a response or adding a completely new endpoint) will **not** require a new version. The current major version will simply be updated."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F1-3_EndpointIntegrationArchitecture",
      "title": "ADR-F1.3: Extensible Plugin Architecture for Target AI Integration",
      "file_path": "docs/architecture/ADRs/ADR-F1-3_EndpointIntegrationArchitecture.md",
      "requirements": [
        "1.  **Standard Interface**: A standardized **`ProviderPlugin` abstract interface** will be defined in the core application. This interface will specify a set of methods that every plugin must implement (e.g., `send_chat_completion`, `list_available_models`)."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-003_RBAC+ABAC",
      "title": "ADR-003: Hybrid Authorization Model using RBAC and ABAC",
      "file_path": "docs/architecture/ADRs/ADR-003_RBAC+ABAC.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F2-1_VulnerabilityTaxonomies",
      "title": "ADR-F2.1: Database-Driven Vulnerability Taxonomy Model",
      "file_path": "docs/architecture/ADRs/ADR-F2-1_VulnerabilityTaxonomies.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-009_ErrorandResponses",
      "title": "ADR-009: Standardized Error Handling with RFC 7807",
      "file_path": "docs/architecture/ADRs/ADR-009_ErrorandResponses.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-006_DataSerializationFormat",
      "title": "ADR-006: JSON as the Exclusive Data Serialization Format",
      "file_path": "docs/architecture/ADRs/ADR-006_DataSerializationFormat.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-010_SoftwareDependencies",
      "title": "ADR-010: Automated Dependency Management and SCA Policy",
      "file_path": "docs/architecture/ADRs/ADR-010_SoftwareDependencies.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F1-1_TemplatingEngine",
      "title": "ADR-F1.1: Sandboxed Templating Engine for Attack Payloads",
      "file_path": "docs/architecture/ADRs/ADR-F1-1_TemplatingEngine.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-005_RateLimiting",
      "title": "ADR-005: Multi-Layered Rate Limiting and Resource Consumption Policy",
      "file_path": "docs/architecture/ADRs/ADR-005_RateLimiting.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-007_Auth_Failover",
      "title": "ADR-007: Authentication Failover Mechanisms",
      "file_path": "docs/architecture/ADRs/ADR-007_Auth_Failover.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-008_LoggingandAuditing",
      "title": "ADR-008: Structured JSON Logging for Multi-Tenant Auditing and Observability",
      "file_path": "docs/architecture/ADRs/ADR-008_LoggingandAuditing.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F3-1_ScoringArchitecture",
      "title": "ADR-F3.1: Hybrid Scoring Architecture for Model Risk Analysis",
      "file_path": "docs/architecture/ADRs/ADR-F3-1_ScoringArchitecture.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-001_RESTstyle",
      "title": "ADR-001: Adopt REST for Standalone API Endpoints",
      "file_path": "docs/architecture/ADRs/ADR-001_RESTstyle.md",
      "requirements": [
        "The ViolentUTF API will adopt and enhance a **RESTful architectural style** for all public-facing endpoints. This decision reaffirms the existing approach but adapts it to meet the new requirements of a standalone, GSA-compliant service."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F1-2_ServersideOrchestration",
      "title": "ADR-F1.2: Server-Side Orchestration for Multi-Turn Attacks",
      "file_path": "docs/architecture/ADRs/ADR-F1-2_ServersideOrchestration.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F4-1_UntrustedModelInteractions",
      "title": "ADR-F4.1: Container-based Sandboxing for Untrusted Model Execution",
      "file_path": "docs/architecture/ADRs/ADR-F4-1_UntrustedModelInteractions.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-002_Authentication",
      "title": "ADR-002: Phased Authentication Strategy using JWT and API Keys",
      "file_path": "docs/architecture/ADRs/ADR-002_Authentication.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F2-2_DataStorage",
      "title": "ADR-F2.2: Polyglot Persistence Strategy for Session Evidence",
      "file_path": "docs/architecture/ADRs/ADR-F2-2_DataStorage.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F4-2_SecretManagement",
      "title": "ADR-F4.2: Centralized Secrets Management for Target System Credentials",
      "file_path": "docs/architecture/ADRs/ADR-F4-2_SecretManagement.md",
      "requirements": [
        "3.  **Just-in-Time (JIT) Retrieval**: Application services (e.g., background workers) will retrieve secrets from the manager on a just-in-time basis immediately before they are needed. Secrets will only be held in memory for the minimal time required and will never be written to disk."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F3-2_ReportGeneration",
      "title": "ADR-F3.2: Server-Side Engine for Automated Report Generation",
      "file_path": "docs/architecture/ADRs/ADR-F3-2_ReportGeneration.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    }
  ],
  "selected_adr_details": {
    "adr_id": "ADR-F1-1_TemplatingEngine",
    "title": "ADR-F1.1: Sandboxed Templating Engine for Attack Payloads",
    "file_path": "docs/architecture/ADRs/ADR-F1-1_TemplatingEngine.md",
    "requirements": [
      "Follow architectural decision guidelines",
      "Maintain consistency with existing patterns"
    ],
    "code_areas": [
      "app/",
      "services/",
      "api/"
    ],
    "risk_level": "medium"
  },
  "adr_compliance": {
    "ADR-F1-1_TemplatingEngine": {
      "adr_id": "ADR-F1-1_TemplatingEngine",
      "compliance_score": 0.0,
      "violations": [
        {
          "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/requirements.txt",
          "line_number": 1,
          "description": "Critical violation: Jinja2 dependency is completely missing from requirements.txt. ADR mandates Jinja2 as the chosen templating engine.",
          "risk_level": "critical",
          "remediation_suggestion": "Add 'jinja2>=3.1.0,<4.0.0' to requirements.txt",
          "confidence": 1.0
        },
        {
          "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/api/routes.py",
          "line_number": 1,
          "description": "Critical violation: No templating endpoints exist. ADR requires API endpoints for template rendering with sandboxed Jinja2 environment.",
          "risk_level": "critical",
          "remediation_suggestion": "Create template rendering endpoints with SandboxedEnvironment implementation",
          "confidence": 1.0
        },
        {
          "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/services",
          "line_number": 1,
          "description": "Critical violation: No templating service implementation found. ADR requires a secure service layer for rendering sandboxed templates.",
          "risk_level": "critical",
          "remediation_suggestion": "Implement TemplateService with Jinja2 SandboxedEnvironment, custom filters, and resource limiting",
          "confidence": 1.0
        },
        {
          "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/core/config.py",
          "line_number": 1,
          "description": "High violation: No template rendering configuration found. ADR requires CPU time and memory limits for template execution.",
          "risk_level": "high",
          "remediation_suggestion": "Add template engine configuration with resource limits (CPU_TIME_LIMIT, MEMORY_LIMIT, MAX_TEMPLATE_SIZE)",
          "confidence": 0.95
        },
        {
          "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app",
          "line_number": 1,
          "description": "Critical violation: No custom filter implementation found. ADR mandates specific filters: base64encode, base64decode, urlencode, leetspeak, reverse, json_escape.",
          "risk_level": "critical",
          "remediation_suggestion": "Implement custom filter library with security-reviewed transformation functions",
          "confidence": 1.0
        },
        {
          "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/utils/validation.py",
          "line_number": 199,
          "description": "Medium violation: Template injection validation missing. While prompt injection validation exists, no specific template injection protection is implemented.",
          "risk_level": "medium",
          "remediation_suggestion": "Extend validation.py to include template injection pattern detection for additional security layers",
          "confidence": 0.85
        }
      ],
      "compliant_areas": [
        "Input validation framework exists (app/utils/validation.py) with security pattern detection",
        "Security-focused configuration system with proper validation (app/core/config.py)",
        "Comprehensive request size limiting middleware that could be extended for template size limits",
        "Structured logging system that could support template rendering audit trails"
      ],
      "recommendations": [
        "Immediately add Jinja2 dependency to requirements.txt with version pinning",
        "Implement TemplateService class using jinja2.SandboxedEnvironment with disabled dangerous methods",
        "Create custom filter library with the six mandated filters (base64encode, base64decode, urlencode, leetspeak, reverse, json_escape)",
        "Add template rendering endpoints with proper input validation and error handling",
        "Implement resource limiting for template execution (CPU time, memory, execution timeout)",
        "Add comprehensive template security testing to existing test suite",
        "Create template injection validation patterns in the existing validation framework",
        "Add template engine configuration to Settings class with security-focused defaults"
      ],
      "analysis_timestamp": "2025-08-02T21:39:02.232929+00:00",
      "files_analyzed": [
        "/Users/tamnguyen/Documents/GitHub/violentutf-api/docs/architecture/ADRs/ADR-F1-1_TemplatingEngine.md",
        "/Users/tamnguyen/Documents/GitHub/violentutf-api/requirements.txt",
        "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/api/routes.py",
        "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/core/config.py",
        "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/core/security.py",
        "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/utils/validation.py",
        "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/api/endpoints/upload.py"
      ],
      "analysis_summary": "Complete non-compliance with ADR-F1-1_TemplatingEngine. The entire sandboxed templating engine implementation is missing. No Jinja2 dependency, no template rendering endpoints, no custom filters, and no sandboxed environment implementation found. The codebase has good security foundations that could support the templating engine implementation, but requires complete implementation from scratch to achieve ADR compliance."
    }
  },
  "all_violations": [
    {
      "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/requirements.txt",
      "line_number": 1,
      "description": "Critical violation: Jinja2 dependency is completely missing from requirements.txt. ADR mandates Jinja2 as the chosen templating engine.",
      "risk_level": "critical",
      "remediation_suggestion": "Add 'jinja2>=3.1.0,<4.0.0' to requirements.txt",
      "confidence": 1.0
    },
    {
      "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/api/routes.py",
      "line_number": 1,
      "description": "Critical violation: No templating endpoints exist. ADR requires API endpoints for template rendering with sandboxed Jinja2 environment.",
      "risk_level": "critical",
      "remediation_suggestion": "Create template rendering endpoints with SandboxedEnvironment implementation",
      "confidence": 1.0
    },
    {
      "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/services",
      "line_number": 1,
      "description": "Critical violation: No templating service implementation found. ADR requires a secure service layer for rendering sandboxed templates.",
      "risk_level": "critical",
      "remediation_suggestion": "Implement TemplateService with Jinja2 SandboxedEnvironment, custom filters, and resource limiting",
      "confidence": 1.0
    },
    {
      "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/core/config.py",
      "line_number": 1,
      "description": "High violation: No template rendering configuration found. ADR requires CPU time and memory limits for template execution.",
      "risk_level": "high",
      "remediation_suggestion": "Add template engine configuration with resource limits (CPU_TIME_LIMIT, MEMORY_LIMIT, MAX_TEMPLATE_SIZE)",
      "confidence": 0.95
    },
    {
      "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app",
      "line_number": 1,
      "description": "Critical violation: No custom filter implementation found. ADR mandates specific filters: base64encode, base64decode, urlencode, leetspeak, reverse, json_escape.",
      "risk_level": "critical",
      "remediation_suggestion": "Implement custom filter library with security-reviewed transformation functions",
      "confidence": 1.0
    },
    {
      "file_path": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/utils/validation.py",
      "line_number": 199,
      "description": "Medium violation: Template injection validation missing. While prompt injection validation exists, no specific template injection protection is implemented.",
      "risk_level": "medium",
      "remediation_suggestion": "Extend validation.py to include template injection pattern detection for additional security layers",
      "confidence": 0.85
    }
  ],
  "violation_summary": {
    "total_violations": 6,
    "by_risk_level": {
      "critical": 4,
      "high": 1,
      "medium": 1
    },
    "by_adr": {
      "unknown": 6
    },
    "top_violated_files": [
      {
        "file": "/Users/tamnguyen/Documents/GitHub/violentutf-api/requirements.txt",
        "violation_count": 1
      },
      {
        "file": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/api/routes.py",
        "violation_count": 1
      },
      {
        "file": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/services",
        "violation_count": 1
      },
      {
        "file": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/core/config.py",
        "violation_count": 1
      },
      {
        "file": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app",
        "violation_count": 1
      },
      {
        "file": "/Users/tamnguyen/Documents/GitHub/violentutf-api/app/utils/validation.py",
        "violation_count": 1
      }
    ]
  },
  "architectural_hotspots": [],
  "multi_tool_results": {
    "analysis_type": "multi_tool_orchestration",
    "focus_adr": "ADR-F1-1_TemplatingEngine",
    "tools_executed": [
      "sonarqube",
      "bandit",
      "lizard",
      "pytestarch"
    ],
    "findings": [],
    "tool_summaries": {
      "sonarqube": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      },
      "bandit": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      },
      "lizard": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      },
      "pytestarch": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      }
    },
    "total_findings": 0,
    "timestamp": "2025-08-02T21:41:59.823683+00:00"
  },
  "git_forensics_results": {
    "analysis_method": "git_forensics",
    "adr_id": "ADR-F1-1_TemplatingEngine",
    "violation_patterns": [
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "app/core/config.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 1,
          "deletions": 0,
          "lines": 1,
          "change_type": "M"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in app/core/config.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "scripts/generate_pr_summary.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 37,
          "deletions": 0,
          "lines": 37,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in scripts/generate_pr_summary.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/cache_manager.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 716,
          "deletions": 0,
          "lines": 716,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/cache_manager.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/claude_code_auditor.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 2388,
          "deletions": 0,
          "lines": 2388,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/claude_code_auditor.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/claude_code_ci_auditor.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 565,
          "deletions": 0,
          "lines": 565,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/claude_code_ci_auditor.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/config.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 49,
          "deletions": 0,
          "lines": 49,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/config.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/historical_analyzer.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 4,
          "deletions": 4,
          "lines": 8,
          "change_type": "M"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/historical_analyzer.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/incremental_analyzer.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 548,
          "deletions": 0,
          "lines": 548,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/incremental_analyzer.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/multi_agent_auditor.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 769,
          "deletions": 0,
          "lines": 769,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/multi_agent_auditor.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/pattern_analyzer.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 530,
          "deletions": 0,
          "lines": 530,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/pattern_analyzer.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/remediation_planner.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 576,
          "deletions": 0,
          "lines": 576,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/remediation_planner.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/safe_cache_manager.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 348,
          "deletions": 0,
          "lines": 348,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/safe_cache_manager.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/smart_analyzer.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 616,
          "deletions": 0,
          "lines": 616,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/smart_analyzer.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_9e4c9b6b",
        "file_path": "tools/pre_audit/streaming_auditor.py",
        "commit_hash": "9e4c9b6b3ef17d4a294dc6aba87d479c0474faa4",
        "commit_message": "Improved ADR Auditor tool #46 #42\n\n  Key Features:\n\n  - Claude Code SDK Integration: All AI functionality exclusively uses Claude Code SDK for Python\n  - Multi-mode Analysis: Full, incremental, and pull-request focused audits\n  - Real-time Streaming: Progressive results with live progress tracking\n  - Intelligent Remediation: AI-powered fix generation with step-by-step guidance\n  - CI/CD Integration: GitHub Actions workflow with SARIF security integration\n  - Interactive Coaching: Multi-turn developer coaching sessions\n  - Multiple Output Formats: JSON, HTML, SARIF, and GitHub Actions summaries\n\n  Production Ready Features:\n\n  - Comprehensive error handling with fallback mechanisms\n  - Environment-based configuration management\n  - CLI interfaces for all components\n  - GitHub Security tab integration via SARIF\n  - PR comment automation with compliance scoring\n  - Artifact upload and retention policies\n\n  Smart Triggers (smart_analyzer.py)\n\n  - Configurable via .architectural-triggers.yml\n  - Analyzes critical paths: app/core/**, app/middleware/**\n  - Size thresholds: 50-150 lines (path-specific)\n  - Commit flags: [arch] forces, [skip-arch] skips\n  - Risk-based scoring combines multiple factors\n\n  Multi-Agent Architecture (multi_agent_auditor.py)\n\n  - SemanticAnalyzerAgent: ADR understanding and code semantics\n  - ViolationDetectorAgent: Multi-dimensional violation detection\n  - RemediationAssistantAgent: Automated fix generation\n  - HistoryForensicsAgent: Git pattern analysis and hotspots\n  - Shared context between agents for 85-90% accuracy\n\n  Dual-Mode CI/CD\n\n  - Local: Claude-powered analysis (85-90% accuracy)\n  - GitHub Actions: Pattern-based only (70-75% accuracy)\n  - PR comments, check runs, and caching\n  - No Claude API usage in CI environment\n\n  Performance Optimizations\n\n  - Memory Cache: LRU with configurable size\n  - Disk Cache: LZ4 compressed with TTL\n  - Redis Cache: Optional team sharing\n  - Incremental Analysis: Only analyzes changed files and dependencies\n\n  🔧 Implementation Details\n\n  Files Created/Modified:\n  - 10 new Python modules in tools/pre_audit/\n  - GitHub Actions workflow for automated PR checks\n  - Comprehensive configuration files (YAML)\n  - 358-line documentation with examples\n\n  Key Features:\n  - Pre-commit hook integration\n  - Git-based dependency tracking\n  - Parallel file analysis\n  - Progressive result streaming\n  - Automated remediation suggestions",
        "author": "Cybonto",
        "date": "2025-08-02T17:24:08-04:00",
        "changes": {
          "insertions": 414,
          "deletions": 0,
          "lines": 414,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tools/pre_audit/streaming_auditor.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_5ac31aa2",
        "file_path": ".github/scripts/test-workflow-execution.py",
        "commit_hash": "5ac31aa27dd2840eac56fb4a85b9bbe244fd3980",
        "commit_message": "Resolve bandit scan issue, prevent multi-layer parsing failures #24\n\n  1. Multi-Layer Parsing Validation Framework\n\n  - Layer 1: YAML structure and GitHub Actions schema validation\n  - Layer 2: Shell script syntax validation with bash -n\n  - Layer 3: Embedded code compilation testing (Python/Node.js)\n  - Layer 4: Integration testing of complete parsing chains\n\n  2. Comprehensive Testing Tools\n\n  - validate-workflow-layers.py: 4-layer validation system\n  - test-workflow-execution.py: Safe execution testing in controlled environment\n  - Enhanced error detection: Catches syntax, parsing, and integration issues\n\n  3. Pre-commit Integration\n\n  - Multi-layer validation hook: Runs on workflow file changes\n  - Execution testing hook: Tests complete parsing chains\n  - Zero-tolerance enforcement: No dangerous patterns allowed\n\n  4. Enhanced Development Workflow\n\n  - Makefile integration: make security-scan includes workflow testing\n  - Local testing capability: Catch issues before CI/CD\n  - Comprehensive coverage: All directories and file types validated\n\n  5. Best Practices Documentation\n\n  - Complete testing strategy: 4-layer approach documented\n  - Common issue solutions: Practical fixes for parsing problems\n  - Developer guidelines: Error prevention checklist and best practices",
        "author": "Cybonto",
        "date": "2025-08-01T10:39:44-04:00",
        "changes": {
          "insertions": 327,
          "deletions": 0,
          "lines": 327,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in .github/scripts/test-workflow-execution.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_5ac31aa2",
        "file_path": ".github/scripts/validate-workflow-layers.py",
        "commit_hash": "5ac31aa27dd2840eac56fb4a85b9bbe244fd3980",
        "commit_message": "Resolve bandit scan issue, prevent multi-layer parsing failures #24\n\n  1. Multi-Layer Parsing Validation Framework\n\n  - Layer 1: YAML structure and GitHub Actions schema validation\n  - Layer 2: Shell script syntax validation with bash -n\n  - Layer 3: Embedded code compilation testing (Python/Node.js)\n  - Layer 4: Integration testing of complete parsing chains\n\n  2. Comprehensive Testing Tools\n\n  - validate-workflow-layers.py: 4-layer validation system\n  - test-workflow-execution.py: Safe execution testing in controlled environment\n  - Enhanced error detection: Catches syntax, parsing, and integration issues\n\n  3. Pre-commit Integration\n\n  - Multi-layer validation hook: Runs on workflow file changes\n  - Execution testing hook: Tests complete parsing chains\n  - Zero-tolerance enforcement: No dangerous patterns allowed\n\n  4. Enhanced Development Workflow\n\n  - Makefile integration: make security-scan includes workflow testing\n  - Local testing capability: Catch issues before CI/CD\n  - Comprehensive coverage: All directories and file types validated\n\n  5. Best Practices Documentation\n\n  - Complete testing strategy: 4-layer approach documented\n  - Common issue solutions: Practical fixes for parsing problems\n  - Developer guidelines: Error prevention checklist and best practices",
        "author": "Cybonto",
        "date": "2025-08-01T10:39:44-04:00",
        "changes": {
          "insertions": 341,
          "deletions": 0,
          "lines": 341,
          "change_type": "A"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in .github/scripts/validate-workflow-layers.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_a352783d",
        "file_path": ".github/scripts/audit-organization-repos.py",
        "commit_hash": "a352783d94429453fb975bf493f40f43bd5ff256",
        "commit_message": "Update audit-organization-repos.py\n\n  - B110 violations: Replaced two try/except/pass blocks in .github/scripts/audit-organization-repos.py:152-153 and :162-163 with proper error handling\n  that provides debug information and explicitly sets empty lists",
        "author": "Cybonto",
        "date": "2025-08-01T09:58:17-04:00",
        "changes": {
          "insertions": 6,
          "deletions": 4,
          "lines": 10,
          "change_type": "M"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in .github/scripts/audit-organization-repos.py",
        "risk_level": "medium"
      },
      {
        "id": "pattern_4bbbc9a8",
        "file_path": "tests/integration/test_auth_integration.py",
        "commit_hash": "4bbbc9a8a60c66a5d263ee05e6c5e5fe52ce1445",
        "commit_message": "Fix errors with PR checks\n\n  1. Security Scanner Failures (Bandit):\n    - Fixed all B105, B106, B107, and B110 violations\n    - Added proper constants with # nosec annotations for OAuth2 and JWT token types\n    - Replaced all try/except/pass blocks with proper error handling and logging\n    - Bandit now reports \"No issues identified\"\n  2. Integration Test Failure:\n    - Fixed the failing test_complete_user_auth_flow that was returning 403 instead of 200\n    - Updated all test passwords to match the correct fixture passwords\n    - Fixed token refresh assertion logic to handle identical tokens gracefully\n    - Test now passes consistently",
        "author": "Cybonto",
        "date": "2025-08-01T08:37:11-04:00",
        "changes": {
          "insertions": 38,
          "deletions": 52,
          "lines": 90,
          "change_type": "M"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in tests/integration/test_auth_integration.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_f4ead39c",
        "file_path": "app/api/endpoints/oauth.py",
        "commit_hash": "f4ead39c4d93934e3923711ac499247478da22c7",
        "commit_message": "Fix security scanner issues (B105, B106, B107, B110)",
        "author": "Cybonto",
        "date": "2025-08-01T08:09:10-04:00",
        "changes": {
          "insertions": 6,
          "deletions": 2,
          "lines": 8,
          "change_type": "M"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in app/api/endpoints/oauth.py",
        "risk_level": "high"
      },
      {
        "id": "pattern_f4ead39c",
        "file_path": "app/core/audit.py",
        "commit_hash": "f4ead39c4d93934e3923711ac499247478da22c7",
        "commit_message": "Fix security scanner issues (B105, B106, B107, B110)",
        "author": "Cybonto",
        "date": "2025-08-01T08:09:10-04:00",
        "changes": {
          "insertions": 3,
          "deletions": 2,
          "lines": 5,
          "change_type": "M"
        },
        "description": "Potential ADR-F1-1_TemplatingEngine related change in app/core/audit.py",
        "risk_level": "high"
      }
    ],
    "architectural_hotspots": [
      {
        "file_path": "app/core/config.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 1068 changes"
        ]
      },
      {
        "file_path": "tools/pre_audit/claude_code_auditor.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 2388 changes"
        ]
      },
      {
        "file_path": "tools/pre_audit/historical_analyzer.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 1464 changes"
        ]
      },
      {
        "file_path": "app/core/input_validation.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 1229 changes"
        ]
      },
      {
        "file_path": "app/utils/sanitization.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 1099 changes"
        ]
      },
      {
        "file_path": "tests/unit/models/test_api_key_comprehensive.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 1007 changes"
        ]
      },
      {
        "file_path": "app/repositories/audit_log.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 1017 changes"
        ]
      },
      {
        "file_path": "tests/unit/test_enhanced_config.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 1038 changes"
        ]
      },
      {
        "file_path": "tests/unit/utils/test_circuit_breaker.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 1050 changes"
        ]
      },
      {
        "file_path": "tests/unit/utils/test_retry.py",
        "churn_score": 100,
        "complexity_score": 100,
        "risk_level": "critical",
        "violation_history": [
          "High churn: 1286 changes"
        ]
      }
    ],
    "remediation_history": {
      "fix_attempts": 0,
      "successful_fixes": 0,
      "regression_count": 0,
      "average_fix_time_days": 0,
      "recent_fixes": []
    },
    "analysis_period_months": 6,
    "timestamp": "2025-08-02T21:42:23.581845+00:00"
  },
  "rag_analysis_results": {
    "message": "RAG analyzer not initialized"
  },
  "recommendations": [
    "Address 4 critical violations immediately"
  ]
}
