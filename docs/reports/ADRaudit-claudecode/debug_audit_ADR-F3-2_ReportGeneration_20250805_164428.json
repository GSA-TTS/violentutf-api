{
  "audit_metadata": {
    "repository_path": ".",
    "adr_path": "docs/architecture/ADRs",
    "analysis_timestamp": "2025-08-05T20:44:28.531036+00:00",
    "execution_time_seconds": 101.37411093711853,
    "mode": "debug_single_adr",
    "selected_adr": "ADR-F3-2_ReportGeneration",
    "total_adrs_discovered": 21,
    "analyzed_adrs": 1
  },
  "overall_compliance_score": 35.2,
  "discovered_adrs": [
    {
      "adr_id": "ADR-011_HistoricalCodeAnalysis",
      "title": "ADR-011: Historical Code Analysis for ADR Compliance Auditing",
      "file_path": "docs/architecture/ADRs/ADR-011_HistoricalCodeAnalysis.md",
      "requirements": [
        "This decision establishes a systematic, automated approach to ADR compliance auditing that scales with the growing complexity of the ViolentUTF API architecture. The Historical Code Analysis Tool addresses critical audit team needs while maintaining security, performance, and operational requirements.",
        "2. **Configurable Detection**: YAML-based patterns adapt to evolving ADR requirements"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-007_AsyncTaskProcessing",
      "title": "ADR-007: Asynchronous Task Processing with HTTP Polling and Webhooks",
      "file_path": "docs/architecture/ADRs/ADR-007_AsyncTaskProcessing.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-004_Versioning",
      "title": "ADR-004: URI Path Versioning Strategy",
      "file_path": "docs/architecture/ADRs/ADR-004_Versioning.md",
      "requirements": [
        "Non-breaking, backward-compatible changes (e.g., adding a new optional field to a response or adding a completely new endpoint) will **not** require a new version. The current major version will simply be updated."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F1-3_EndpointIntegrationArchitecture",
      "title": "ADR-F1.3: Extensible Plugin Architecture for Target AI Integration",
      "file_path": "docs/architecture/ADRs/ADR-F1-3_EndpointIntegrationArchitecture.md",
      "requirements": [
        "1.  **Standard Interface**: A standardized **`ProviderPlugin` abstract interface** will be defined in the core application. This interface will specify a set of methods that every plugin must implement (e.g., `send_chat_completion`, `list_available_models`)."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-003_RBAC+ABAC",
      "title": "ADR-003: Hybrid Authorization Model using RBAC and ABAC",
      "file_path": "docs/architecture/ADRs/ADR-003_RBAC+ABAC.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F2-1_VulnerabilityTaxonomies",
      "title": "ADR-F2.1: Database-Driven Vulnerability Taxonomy Model",
      "file_path": "docs/architecture/ADRs/ADR-F2-1_VulnerabilityTaxonomies.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-009_ErrorandResponses",
      "title": "ADR-009: Standardized Error Handling with RFC 7807",
      "file_path": "docs/architecture/ADRs/ADR-009_ErrorandResponses.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-006_DataSerializationFormat",
      "title": "ADR-006: JSON as the Exclusive Data Serialization Format",
      "file_path": "docs/architecture/ADRs/ADR-006_DataSerializationFormat.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-010_SoftwareDependencies",
      "title": "ADR-010: Automated Dependency Management and SCA Policy",
      "file_path": "docs/architecture/ADRs/ADR-010_SoftwareDependencies.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F1-1_TemplatingEngine",
      "title": "ADR-F1.1: Sandboxed Templating Engine for Attack Payloads",
      "file_path": "docs/architecture/ADRs/ADR-F1-1_TemplatingEngine.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-005_RateLimiting",
      "title": "ADR-005: Multi-Layered Rate Limiting and Resource Consumption Policy",
      "file_path": "docs/architecture/ADRs/ADR-005_RateLimiting.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-007_Auth_Failover",
      "title": "ADR-007: Authentication Failover Mechanisms",
      "file_path": "docs/architecture/ADRs/ADR-007_Auth_Failover.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-008_LoggingandAuditing",
      "title": "ADR-008: Structured JSON Logging for Multi-Tenant Auditing and Observability",
      "file_path": "docs/architecture/ADRs/ADR-008_LoggingandAuditing.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F3-1_ScoringArchitecture",
      "title": "ADR-F3.1: Hybrid Scoring Architecture for Model Risk Analysis",
      "file_path": "docs/architecture/ADRs/ADR-F3-1_ScoringArchitecture.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-001_RESTstyle",
      "title": "ADR-001: Adopt REST for Standalone API Endpoints",
      "file_path": "docs/architecture/ADRs/ADR-001_RESTstyle.md",
      "requirements": [
        "The ViolentUTF API will adopt and enhance a **RESTful architectural style** for all public-facing endpoints. This decision reaffirms the existing approach but adapts it to meet the new requirements of a standalone, GSA-compliant service."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F1-2_ServersideOrchestration",
      "title": "ADR-F1.2: Server-Side Orchestration for Multi-Turn Attacks",
      "file_path": "docs/architecture/ADRs/ADR-F1-2_ServersideOrchestration.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F4-1_UntrustedModelInteractions",
      "title": "ADR-F4.1: Container-based Sandboxing for Untrusted Model Execution",
      "file_path": "docs/architecture/ADRs/ADR-F4-1_UntrustedModelInteractions.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-002_Authentication",
      "title": "ADR-002: Phased Authentication Strategy using JWT and API Keys",
      "file_path": "docs/architecture/ADRs/ADR-002_Authentication.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F2-2_DataStorage",
      "title": "ADR-F2.2: Polyglot Persistence Strategy for Session Evidence",
      "file_path": "docs/architecture/ADRs/ADR-F2-2_DataStorage.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F4-2_SecretManagement",
      "title": "ADR-F4.2: Centralized Secrets Management for Target System Credentials",
      "file_path": "docs/architecture/ADRs/ADR-F4-2_SecretManagement.md",
      "requirements": [
        "3.  **Just-in-Time (JIT) Retrieval**: Application services (e.g., background workers) will retrieve secrets from the manager on a just-in-time basis immediately before they are needed. Secrets will only be held in memory for the minimal time required and will never be written to disk."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F3-2_ReportGeneration",
      "title": "ADR-F3.2: Server-Side Engine for Automated Report Generation",
      "file_path": "docs/architecture/ADRs/ADR-F3-2_ReportGeneration.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    }
  ],
  "selected_adr_details": {
    "adr_id": "ADR-F3-2_ReportGeneration",
    "title": "ADR-F3.2: Server-Side Engine for Automated Report Generation",
    "file_path": "docs/architecture/ADRs/ADR-F3-2_ReportGeneration.md",
    "requirements": [
      "Follow architectural decision guidelines",
      "Maintain consistency with existing patterns"
    ],
    "code_areas": [
      "app/",
      "services/",
      "api/"
    ],
    "risk_level": "medium"
  },
  "adr_compliance": {
    "ADR-F3-2_ReportGeneration": {
      "adr_id": "ADR-F3-2_ReportGeneration",
      "compliance_score": 35.2,
      "violations": [
        {
          "file_path": "app/api/routes.py",
          "line_number": 21,
          "description": "Missing required report generation API endpoint '/api/v1/reports/generate' as specified in ADR execution flow step 1. The API router does not include any report-related endpoints.",
          "risk_level": "critical",
          "remediation_suggestion": "Add report generation endpoint with POST /api/v1/reports/generate that accepts config_id parameter and returns 202 Accepted with task_id",
          "confidence": 0.98
        },
        {
          "file_path": "app/main.py",
          "line_number": 142,
          "description": "FastAPI application lacks integration with Celery task queue system required by ADR for asynchronous report generation. No task queue configuration found.",
          "risk_level": "critical",
          "remediation_suggestion": "Integrate Celery task queue system for asynchronous report generation as specified in ADR execution flow",
          "confidence": 0.95
        },
        {
          "file_path": "app/core/config.py",
          "line_number": 18,
          "description": "Application configuration missing required settings for report generation worker fleet, blob storage URLs, and report template configurations",
          "risk_level": "high",
          "remediation_suggestion": "Add REPORT_WORKER_CONCURRENCY, BLOB_STORAGE_URL, REPORT_TEMPLATES_DIR, and other report-specific settings to configuration",
          "confidence": 0.92
        },
        {
          "file_path": "tools/pre_audit/reporting/base.py",
          "line_number": 98,
          "description": "Report generation exists only in tools/pre_audit context, not integrated into main FastAPI application as required by ADR. This violates the server-side engine architectural requirement.",
          "risk_level": "high",
          "remediation_suggestion": "Move report generation logic from tools to app/services and integrate with FastAPI application endpoints",
          "confidence": 0.9
        },
        {
          "file_path": "tools/pre_audit/reporting/exporters/pdf_generator.py",
          "line_number": 86,
          "description": "PDF generation using ReportLab exists but not integrated with headless browser (Playwright) as specified in ADR requirements for HTML to PDF rendering",
          "risk_level": "medium",
          "remediation_suggestion": "Replace ReportLab with Playwright for headless browser PDF generation as specified in ADR technology stack",
          "confidence": 0.85
        },
        {
          "file_path": "tools/pre_audit/reporting/exporters/html_generator.py",
          "line_number": 63,
          "description": "Jinja2 template system is implemented correctly but lacks integration with report composition engine for dynamic block assembly as required by ADR",
          "risk_level": "medium",
          "remediation_suggestion": "Implement composable block architecture that dynamically assembles report blocks (executive_summary, detailed_findings) based on Report Configuration",
          "confidence": 0.8
        },
        {
          "file_path": "app/main.py",
          "line_number": 1,
          "description": "No dedicated reporting worker process configuration found. ADR requires dedicated backend service with worker fleet for report generation tasks",
          "risk_level": "high",
          "remediation_suggestion": "Implement dedicated reporting worker processes with proper CPU/memory configuration for intensive PDF generation tasks",
          "confidence": 0.88
        }
      ],
      "compliant_areas": [
        "Multi-format output support (HTML, PDF, JSON) implemented in tools/pre_audit/reporting/exporters",
        "Jinja2 templating system correctly implemented with sandboxed environment for security",
        "Structured JSON object creation for report data as specified in ADR",
        "Report data processing and composition logic partially implemented",
        "Security measures (input validation, output encoding) properly implemented in reporting modules"
      ],
      "recommendations": [
        "CRITICAL: Implement POST /api/v1/reports/generate endpoint with proper async task queue integration",
        "CRITICAL: Integrate Celery or equivalent task queue system for long-running report generation jobs",
        "HIGH: Move report generation from tools directory to main application as proper service integration",
        "HIGH: Implement dedicated reporting worker fleet with proper resource allocation for PDF generation",
        "MEDIUM: Replace ReportLab with Playwright for HTML to PDF conversion as specified in ADR",
        "MEDIUM: Add blob storage integration for generated report artifact storage",
        "LOW: Enhance configuration system with report-specific settings and worker parameters"
      ],
      "analysis_timestamp": "2025-08-05T20:42:47.156952+00:00",
      "files_analyzed": [
        "docs/architecture/ADRs/ADR-F3-2_ReportGeneration.md",
        "app/api/routes.py",
        "app/main.py",
        "app/core/config.py",
        "tools/pre_audit/reporting/base.py",
        "tools/pre_audit/reporting/exporters/pdf_generator.py",
        "tools/pre_audit/reporting/exporters/html_generator.py",
        "tools/pre_audit/reporting/export_manager.py"
      ],
      "analysis_summary": "The codebase shows partial implementation of report generation capabilities but fails to meet the core ADR requirement of server-side engine integration with the main FastAPI application. While comprehensive report generation logic exists in the tools/pre_audit directory with proper multi-format support (HTML, PDF, JSON), security measures, and Jinja2 templating, it operates as a standalone tool rather than an integrated API service. Critical missing components include the /api/v1/reports/generate endpoint, Celery task queue integration, dedicated reporting workers, and proper blob storage for artifacts. The compliance score of 35.2% reflects that foundational report generation capabilities exist but lack proper architectural integration as specified in the ADR."
    }
  },
  "all_violations": [
    {
      "file_path": "app/api/routes.py",
      "line_number": 21,
      "description": "Missing required report generation API endpoint '/api/v1/reports/generate' as specified in ADR execution flow step 1. The API router does not include any report-related endpoints.",
      "risk_level": "critical",
      "remediation_suggestion": "Add report generation endpoint with POST /api/v1/reports/generate that accepts config_id parameter and returns 202 Accepted with task_id",
      "confidence": 0.98
    },
    {
      "file_path": "app/main.py",
      "line_number": 142,
      "description": "FastAPI application lacks integration with Celery task queue system required by ADR for asynchronous report generation. No task queue configuration found.",
      "risk_level": "critical",
      "remediation_suggestion": "Integrate Celery task queue system for asynchronous report generation as specified in ADR execution flow",
      "confidence": 0.95
    },
    {
      "file_path": "app/core/config.py",
      "line_number": 18,
      "description": "Application configuration missing required settings for report generation worker fleet, blob storage URLs, and report template configurations",
      "risk_level": "high",
      "remediation_suggestion": "Add REPORT_WORKER_CONCURRENCY, BLOB_STORAGE_URL, REPORT_TEMPLATES_DIR, and other report-specific settings to configuration",
      "confidence": 0.92
    },
    {
      "file_path": "tools/pre_audit/reporting/base.py",
      "line_number": 98,
      "description": "Report generation exists only in tools/pre_audit context, not integrated into main FastAPI application as required by ADR. This violates the server-side engine architectural requirement.",
      "risk_level": "high",
      "remediation_suggestion": "Move report generation logic from tools to app/services and integrate with FastAPI application endpoints",
      "confidence": 0.9
    },
    {
      "file_path": "tools/pre_audit/reporting/exporters/pdf_generator.py",
      "line_number": 86,
      "description": "PDF generation using ReportLab exists but not integrated with headless browser (Playwright) as specified in ADR requirements for HTML to PDF rendering",
      "risk_level": "medium",
      "remediation_suggestion": "Replace ReportLab with Playwright for headless browser PDF generation as specified in ADR technology stack",
      "confidence": 0.85
    },
    {
      "file_path": "tools/pre_audit/reporting/exporters/html_generator.py",
      "line_number": 63,
      "description": "Jinja2 template system is implemented correctly but lacks integration with report composition engine for dynamic block assembly as required by ADR",
      "risk_level": "medium",
      "remediation_suggestion": "Implement composable block architecture that dynamically assembles report blocks (executive_summary, detailed_findings) based on Report Configuration",
      "confidence": 0.8
    },
    {
      "file_path": "app/main.py",
      "line_number": 1,
      "description": "No dedicated reporting worker process configuration found. ADR requires dedicated backend service with worker fleet for report generation tasks",
      "risk_level": "high",
      "remediation_suggestion": "Implement dedicated reporting worker processes with proper CPU/memory configuration for intensive PDF generation tasks",
      "confidence": 0.88
    }
  ],
  "violation_summary": {
    "total_violations": 7,
    "by_risk_level": {
      "critical": 2,
      "high": 3,
      "medium": 2
    },
    "by_adr": {
      "unknown": 7
    },
    "top_violated_files": [
      {
        "file": "app/main.py",
        "violation_count": 2
      },
      {
        "file": "app/api/routes.py",
        "violation_count": 1
      },
      {
        "file": "app/core/config.py",
        "violation_count": 1
      },
      {
        "file": "tools/pre_audit/reporting/base.py",
        "violation_count": 1
      },
      {
        "file": "tools/pre_audit/reporting/exporters/pdf_generator.py",
        "violation_count": 1
      },
      {
        "file": "tools/pre_audit/reporting/exporters/html_generator.py",
        "violation_count": 1
      }
    ]
  },
  "architectural_hotspots": [
    {
      "file_path": ".pre-commit-config.yaml",
      "churn_score": 20,
      "architectural_fix_count": 2,
      "fix_types": [
        "dependency_fix",
        "architectural_fix"
      ],
      "complexity_indicators": [
        "dependency_issues"
      ],
      "risk_level": "medium",
      "recommendations": [
        "Analyze and reduce coupling",
        "Introduce dependency injection or interfaces"
      ],
      "last_fix_date": "2025-08-03T13:06:24-04:00",
      "adr_references": []
    }
  ],
  "multi_tool_results": {
    "analysis_type": "multi_tool_orchestration",
    "focus_adr": "ADR-F3-2_ReportGeneration",
    "tools_executed": [
      "sonarqube",
      "bandit",
      "lizard",
      "pytestarch"
    ],
    "findings": [],
    "tool_summaries": {
      "sonarqube": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      },
      "bandit": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      },
      "lizard": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      },
      "pytestarch": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      }
    },
    "total_findings": 0,
    "timestamp": "2025-08-05T20:44:25.209325+00:00"
  },
  "git_forensics_results": {
    "analysis_method": "git_forensics_enhanced",
    "adr_id": "ADR-F3-2_ReportGeneration",
    "violation_patterns": [],
    "architectural_hotspots": [],
    "remediation_history": [],
    "analysis_period_months": 6,
    "timestamp": "2025-08-05T20:44:28.530539+00:00",
    "summary": {
      "total_fixes": 0,
      "fix_types": {},
      "top_contributors": [],
      "average_confidence": 0.0
    }
  },
  "rag_analysis_results": {
    "message": "RAG analyzer not initialized"
  },
  "recommendations": [
    "Address 2 critical violations immediately"
  ]
}
