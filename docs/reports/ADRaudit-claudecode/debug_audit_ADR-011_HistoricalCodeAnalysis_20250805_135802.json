{
  "audit_metadata": {
    "repository_path": ".",
    "adr_path": "docs/architecture/ADRs",
    "analysis_timestamp": "2025-08-05T17:58:02.491085+00:00",
    "execution_time_seconds": 105.98104119300842,
    "mode": "debug_single_adr",
    "selected_adr": "ADR-011_HistoricalCodeAnalysis",
    "total_adrs_discovered": 21,
    "analyzed_adrs": 1
  },
  "overall_compliance_score": 87.3,
  "discovered_adrs": [
    {
      "adr_id": "ADR-011_HistoricalCodeAnalysis",
      "title": "ADR-011: Historical Code Analysis for ADR Compliance Auditing",
      "file_path": "docs/architecture/ADRs/ADR-011_HistoricalCodeAnalysis.md",
      "requirements": [
        "This decision establishes a systematic, automated approach to ADR compliance auditing that scales with the growing complexity of the ViolentUTF API architecture. The Historical Code Analysis Tool addresses critical audit team needs while maintaining security, performance, and operational requirements.",
        "2. **Configurable Detection**: YAML-based patterns adapt to evolving ADR requirements"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-007_AsyncTaskProcessing",
      "title": "ADR-007: Asynchronous Task Processing with HTTP Polling and Webhooks",
      "file_path": "docs/architecture/ADRs/ADR-007_AsyncTaskProcessing.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-004_Versioning",
      "title": "ADR-004: URI Path Versioning Strategy",
      "file_path": "docs/architecture/ADRs/ADR-004_Versioning.md",
      "requirements": [
        "Non-breaking, backward-compatible changes (e.g., adding a new optional field to a response or adding a completely new endpoint) will **not** require a new version. The current major version will simply be updated."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F1-3_EndpointIntegrationArchitecture",
      "title": "ADR-F1.3: Extensible Plugin Architecture for Target AI Integration",
      "file_path": "docs/architecture/ADRs/ADR-F1-3_EndpointIntegrationArchitecture.md",
      "requirements": [
        "1.  **Standard Interface**: A standardized **`ProviderPlugin` abstract interface** will be defined in the core application. This interface will specify a set of methods that every plugin must implement (e.g., `send_chat_completion`, `list_available_models`)."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-003_RBAC+ABAC",
      "title": "ADR-003: Hybrid Authorization Model using RBAC and ABAC",
      "file_path": "docs/architecture/ADRs/ADR-003_RBAC+ABAC.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F2-1_VulnerabilityTaxonomies",
      "title": "ADR-F2.1: Database-Driven Vulnerability Taxonomy Model",
      "file_path": "docs/architecture/ADRs/ADR-F2-1_VulnerabilityTaxonomies.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-009_ErrorandResponses",
      "title": "ADR-009: Standardized Error Handling with RFC 7807",
      "file_path": "docs/architecture/ADRs/ADR-009_ErrorandResponses.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-006_DataSerializationFormat",
      "title": "ADR-006: JSON as the Exclusive Data Serialization Format",
      "file_path": "docs/architecture/ADRs/ADR-006_DataSerializationFormat.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-010_SoftwareDependencies",
      "title": "ADR-010: Automated Dependency Management and SCA Policy",
      "file_path": "docs/architecture/ADRs/ADR-010_SoftwareDependencies.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F1-1_TemplatingEngine",
      "title": "ADR-F1.1: Sandboxed Templating Engine for Attack Payloads",
      "file_path": "docs/architecture/ADRs/ADR-F1-1_TemplatingEngine.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-005_RateLimiting",
      "title": "ADR-005: Multi-Layered Rate Limiting and Resource Consumption Policy",
      "file_path": "docs/architecture/ADRs/ADR-005_RateLimiting.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-007_Auth_Failover",
      "title": "ADR-007: Authentication Failover Mechanisms",
      "file_path": "docs/architecture/ADRs/ADR-007_Auth_Failover.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-008_LoggingandAuditing",
      "title": "ADR-008: Structured JSON Logging for Multi-Tenant Auditing and Observability",
      "file_path": "docs/architecture/ADRs/ADR-008_LoggingandAuditing.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F3-1_ScoringArchitecture",
      "title": "ADR-F3.1: Hybrid Scoring Architecture for Model Risk Analysis",
      "file_path": "docs/architecture/ADRs/ADR-F3-1_ScoringArchitecture.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-001_RESTstyle",
      "title": "ADR-001: Adopt REST for Standalone API Endpoints",
      "file_path": "docs/architecture/ADRs/ADR-001_RESTstyle.md",
      "requirements": [
        "The ViolentUTF API will adopt and enhance a **RESTful architectural style** for all public-facing endpoints. This decision reaffirms the existing approach but adapts it to meet the new requirements of a standalone, GSA-compliant service."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F1-2_ServersideOrchestration",
      "title": "ADR-F1.2: Server-Side Orchestration for Multi-Turn Attacks",
      "file_path": "docs/architecture/ADRs/ADR-F1-2_ServersideOrchestration.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F4-1_UntrustedModelInteractions",
      "title": "ADR-F4.1: Container-based Sandboxing for Untrusted Model Execution",
      "file_path": "docs/architecture/ADRs/ADR-F4-1_UntrustedModelInteractions.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-002_Authentication",
      "title": "ADR-002: Phased Authentication Strategy using JWT and API Keys",
      "file_path": "docs/architecture/ADRs/ADR-002_Authentication.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F2-2_DataStorage",
      "title": "ADR-F2.2: Polyglot Persistence Strategy for Session Evidence",
      "file_path": "docs/architecture/ADRs/ADR-F2-2_DataStorage.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F4-2_SecretManagement",
      "title": "ADR-F4.2: Centralized Secrets Management for Target System Credentials",
      "file_path": "docs/architecture/ADRs/ADR-F4-2_SecretManagement.md",
      "requirements": [
        "3.  **Just-in-Time (JIT) Retrieval**: Application services (e.g., background workers) will retrieve secrets from the manager on a just-in-time basis immediately before they are needed. Secrets will only be held in memory for the minimal time required and will never be written to disk."
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    },
    {
      "adr_id": "ADR-F3-2_ReportGeneration",
      "title": "ADR-F3.2: Server-Side Engine for Automated Report Generation",
      "file_path": "docs/architecture/ADRs/ADR-F3-2_ReportGeneration.md",
      "requirements": [
        "Follow architectural decision guidelines",
        "Maintain consistency with existing patterns"
      ],
      "code_areas": [
        "app/",
        "services/",
        "api/"
      ],
      "risk_level": "medium"
    }
  ],
  "selected_adr_details": {
    "adr_id": "ADR-011_HistoricalCodeAnalysis",
    "title": "ADR-011: Historical Code Analysis for ADR Compliance Auditing",
    "file_path": "docs/architecture/ADRs/ADR-011_HistoricalCodeAnalysis.md",
    "requirements": [
      "This decision establishes a systematic, automated approach to ADR compliance auditing that scales with the growing complexity of the ViolentUTF API architecture. The Historical Code Analysis Tool addresses critical audit team needs while maintaining security, performance, and operational requirements.",
      "2. **Configurable Detection**: YAML-based patterns adapt to evolving ADR requirements"
    ],
    "code_areas": [
      "app/",
      "services/",
      "api/"
    ],
    "risk_level": "medium"
  },
  "adr_compliance": {
    "ADR-011_HistoricalCodeAnalysis": {
      "adr_id": "ADR-011_HistoricalCodeAnalysis",
      "compliance_score": 87.3,
      "violations": [
        {
          "file_path": "tools/pre_audit/historical_analyzer.py",
          "line_number": 562,
          "description": "ComplexityAnalyzer._is_safe_file_path() method uses basic path validation but lacks comprehensive protection against all path traversal variants mentioned in ADR security requirements. Missing validation for null bytes, encoded traversal sequences, and Windows-specific paths.",
          "risk_level": "medium",
          "remediation_suggestion": "Enhance path validation to include null byte checks, decode URL-encoded sequences, normalize path separators, and validate against a whitelist of allowed directories",
          "confidence": 0.85
        },
        {
          "file_path": "tools/pre_audit/historical_analyzer.py",
          "line_number": 1131,
          "description": "Repository path validation function _validate_repository_path() does not implement all security validations mentioned in ADR requirements. Missing comprehensive git structure validation and symlink resolution checks.",
          "risk_level": "medium",
          "remediation_suggestion": "Add symlink resolution validation, comprehensive git object validation, and implement secure path canonicalization",
          "confidence": 0.82
        },
        {
          "file_path": "config/violation_patterns.yml",
          "line_number": 95,
          "description": "Configuration file contains 20+ ADR patterns as required, but some advanced patterns mentioned in ADR (like machine learning enhancement patterns) are not yet implemented.",
          "risk_level": "low",
          "remediation_suggestion": "Add configuration patterns for future ML enhancement integration and automated remediation suggestion patterns",
          "confidence": 0.75
        },
        {
          "file_path": "tools/pre_audit/historical_analyzer.py",
          "line_number": 799,
          "description": "Performance metrics calculation includes commits_per_second but there's no explicit validation that it meets the ADR requirement of 100+ commits per second. No benchmark testing infrastructure found.",
          "risk_level": "medium",
          "remediation_suggestion": "Implement automated performance benchmarking with minimum performance thresholds and CI integration for performance regression detection",
          "confidence": 0.78
        },
        {
          "file_path": "tools/pre_audit/historical_analyzer.py",
          "line_number": 1092,
          "description": "Report naming convention implemented correctly follows ADRaudit_ prefix requirement, but missing integration with existing CI/CD pipelines mentioned in ADR operational integration section.",
          "risk_level": "low",
          "remediation_suggestion": "Create GitHub Actions workflow or pre-commit hooks to automate report generation and integrate with existing quality gates",
          "confidence": 0.7
        }
      ],
      "compliant_areas": [
        "Core Architecture Components: All 5 required components (Git History Parser, ADR Pattern Matcher, Multi-Factor Risk Scorer, Report Generator, Security Layer) are properly implemented",
        "Risk Scoring Algorithm: Correctly implements the specified formula: Risk Score = (Frequency × RecencyWeight) × SeverityWeight × ComplexityScore with logarithmic normalization",
        "Configuration System: Comprehensive YAML-based violation patterns covering all 20+ ADRs with proper structure and validation",
        "Security Input Validation: Implements path traversal protection, file size limits (10MB), and secure file permissions (0o644)",
        "Pattern-Driven Detection: Implements configurable YAML patterns with file patterns, diff patterns, and keyword matching",
        "Temporal Risk Weighting: Correctly applies recency weighting with linear decay from 1.0 to 0.1 as specified",
        "Multi-Layer Analysis: Implements file patterns, diff patterns, and source code content analysis as required",
        "Report Generation: Generates comprehensive Markdown reports with ADRaudit_ naming convention and enhanced descriptive names",
        "Usage Examples: Provides all command-line usage patterns specified in ADR documentation",
        "Integration Support: Compatible with existing ADR-008 (logging), ADR-F3-2 (reporting), and ADR-010 (dependencies)"
      ],
      "recommendations": [
        "Implement comprehensive performance benchmarking suite with automated testing of the 100+ commits/second requirement",
        "Enhance security validation with additional path traversal protection mechanisms and comprehensive input sanitization",
        "Add CI/CD integration workflows for automated monthly compliance reporting and pre-commit validation",
        "Implement comprehensive unit testing suite specifically for the historical analyzer components",
        "Add machine learning readiness patterns to configuration for future enhancement capabilities",
        "Create monitoring and alerting mechanisms for analysis processing failures and performance degradation",
        "Implement database integration for storing and tracking historical analysis results over time"
      ],
      "analysis_timestamp": "2025-08-05T17:56:16.510068+00:00",
      "files_analyzed": [
        "docs/architecture/ADRs/ADR-011_HistoricalCodeAnalysis.md",
        "tools/pre_audit/historical_analyzer.py",
        "config/violation_patterns.yml",
        "tools/pre_audit/config/hotspot_analysis_config.yaml",
        "pyproject.toml"
      ],
      "analysis_summary": "The historical code analysis implementation demonstrates strong architectural compliance with ADR-011, achieving 87.3% compliance. All core architectural components are properly implemented with sophisticated risk scoring, comprehensive pattern matching, and robust security measures. Key strengths include the complete implementation of the multi-factor risk scoring algorithm, comprehensive ADR pattern coverage, and security-first design principles. Primary improvement areas focus on enhanced security validation, performance benchmarking infrastructure, and CI/CD integration for operational excellence."
    }
  },
  "all_violations": [
    {
      "file_path": "tools/pre_audit/historical_analyzer.py",
      "line_number": 562,
      "description": "ComplexityAnalyzer._is_safe_file_path() method uses basic path validation but lacks comprehensive protection against all path traversal variants mentioned in ADR security requirements. Missing validation for null bytes, encoded traversal sequences, and Windows-specific paths.",
      "risk_level": "medium",
      "remediation_suggestion": "Enhance path validation to include null byte checks, decode URL-encoded sequences, normalize path separators, and validate against a whitelist of allowed directories",
      "confidence": 0.85
    },
    {
      "file_path": "tools/pre_audit/historical_analyzer.py",
      "line_number": 1131,
      "description": "Repository path validation function _validate_repository_path() does not implement all security validations mentioned in ADR requirements. Missing comprehensive git structure validation and symlink resolution checks.",
      "risk_level": "medium",
      "remediation_suggestion": "Add symlink resolution validation, comprehensive git object validation, and implement secure path canonicalization",
      "confidence": 0.82
    },
    {
      "file_path": "config/violation_patterns.yml",
      "line_number": 95,
      "description": "Configuration file contains 20+ ADR patterns as required, but some advanced patterns mentioned in ADR (like machine learning enhancement patterns) are not yet implemented.",
      "risk_level": "low",
      "remediation_suggestion": "Add configuration patterns for future ML enhancement integration and automated remediation suggestion patterns",
      "confidence": 0.75
    },
    {
      "file_path": "tools/pre_audit/historical_analyzer.py",
      "line_number": 799,
      "description": "Performance metrics calculation includes commits_per_second but there's no explicit validation that it meets the ADR requirement of 100+ commits per second. No benchmark testing infrastructure found.",
      "risk_level": "medium",
      "remediation_suggestion": "Implement automated performance benchmarking with minimum performance thresholds and CI integration for performance regression detection",
      "confidence": 0.78
    },
    {
      "file_path": "tools/pre_audit/historical_analyzer.py",
      "line_number": 1092,
      "description": "Report naming convention implemented correctly follows ADRaudit_ prefix requirement, but missing integration with existing CI/CD pipelines mentioned in ADR operational integration section.",
      "risk_level": "low",
      "remediation_suggestion": "Create GitHub Actions workflow or pre-commit hooks to automate report generation and integrate with existing quality gates",
      "confidence": 0.7
    }
  ],
  "violation_summary": {
    "total_violations": 5,
    "by_risk_level": {
      "medium": 3,
      "low": 2
    },
    "by_adr": {
      "unknown": 5
    },
    "top_violated_files": [
      {
        "file": "tools/pre_audit/historical_analyzer.py",
        "violation_count": 4
      },
      {
        "file": "config/violation_patterns.yml",
        "violation_count": 1
      }
    ]
  },
  "architectural_hotspots": [
    {
      "file_path": ".pre-commit-config.yaml",
      "churn_score": 20,
      "architectural_fix_count": 2,
      "fix_types": [
        "dependency_fix",
        "architectural_fix"
      ],
      "complexity_indicators": [
        "dependency_issues"
      ],
      "risk_level": "medium",
      "recommendations": [
        "Analyze and reduce coupling",
        "Introduce dependency injection or interfaces"
      ],
      "last_fix_date": "2025-08-03T13:06:24-04:00",
      "adr_references": []
    }
  ],
  "multi_tool_results": {
    "analysis_type": "multi_tool_orchestration",
    "focus_adr": "ADR-011_HistoricalCodeAnalysis",
    "tools_executed": [
      "sonarqube",
      "bandit",
      "lizard",
      "pytestarch"
    ],
    "findings": [],
    "tool_summaries": {
      "sonarqube": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      },
      "bandit": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      },
      "lizard": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      },
      "pytestarch": {
        "findings_count": 0,
        "execution_time": 0.1,
        "status": "success"
      }
    },
    "total_findings": 0,
    "timestamp": "2025-08-05T17:57:58.849227+00:00"
  },
  "git_forensics_results": {
    "analysis_method": "git_forensics_enhanced",
    "adr_id": "ADR-011_HistoricalCodeAnalysis",
    "violation_patterns": [],
    "architectural_hotspots": [],
    "remediation_history": [],
    "analysis_period_months": 6,
    "timestamp": "2025-08-05T17:58:02.490569+00:00",
    "summary": {
      "total_fixes": 0,
      "fix_types": {},
      "top_contributors": [],
      "average_confidence": 0.0
    }
  },
  "rag_analysis_results": {
    "message": "RAG analyzer not initialized"
  },
  "recommendations": []
}
