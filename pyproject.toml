[tool.poetry]
name = "violentutf-api"
version = "1.0.0"
description = "Standalone AI red-teaming API service"
authors = ["ViolentUTF Team"]
license = "MIT"
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = ">=0.116.0,<0.117.0"
uvicorn = {extras = ["standard"], version = ">=0.27.0,<0.36.0"}
pydantic = {extras = ["email"], version = ">=2.5.0,<3.0.0"}
pydantic-settings = ">=2.0.0,<3.0.0"
sqlalchemy = ">=2.0.25,<3.0.0"
alembic = ">=1.13.0,<2.0.0"
pyjwt = {extras = ["crypto"], version = ">=2.8.0,<3.0.0"}
cryptography = ">=44.0.1,<46.0.0"
passlib = {extras = ["argon2"], version = ">=1.7.4,<2.0.0"}
redis = {extras = ["hiredis"], version = ">=5.0.0,<6.0.0"}
httpx = ">=0.27.0,<0.29.0"
python-dotenv = ">=1.0.0,<2.0.0"
pyyaml = ">=6.0.0,<7.0.0"
gitpython = ">=3.1.40,<4.0.0"
# Statistical analysis dependencies for GitHub Issue #43
numpy = ">=1.24.0,<2.0.0"
pandas = ">=2.0.0,<3.0.0"
scipy = ">=1.10.0,<2.0.0"
scikit-learn = ">=1.3.0,<2.0.0"
# Monitoring and logging
structlog = ">=24.1.0,<26.0.0"
prometheus-client = ">=0.19.0,<0.23.0"

# Reporting & Visualization
matplotlib = ">=3.7.0,<4.0.0"
reportlab = ">=4.0.0,<5.0.0"
Pillow = ">=10.0.0,<11.0.0"

# Scheduling
apscheduler = ">=3.10.0,<4.0.0"

# Additional missing dependencies
pyotp = ">=2.8.0,<3.0.0"
qrcode = {extras = ["pil"], version = ">=7.4.0,<9.0.0"}
bleach = ">=6.1.0,<7.0.0"
secure = ">=0.3.0,<0.4.0"
slowapi = ">=0.1.9,<0.2.0"
celery = {extras = ["redis"], version = ">=5.3.0,<6.0.0"}
email-validator = ">=2.1.0,<3.0.0"
python-multipart = ">=0.0.6,<0.1.0"
aiosqlite = ">=0.19.0,<0.22.0"
asyncpg = ">=0.29.0,<0.31.0"
psycopg = {extras = ["binary"], version = ">=3.1.0,<4.0.0"}
psycopg2-binary = ">=2.9.0,<3.0.0"
greenlet = ">=3.0.0,<4.0.0"
argon2-cffi = ">=23.1.0,<24.0.0"
bcrypt = ">=4.0.0,<5.0.0"
orjson = ">=3.9.0,<4.0.0"
opentelemetry-api = ">=1.22.0,<2.0.0"
opentelemetry-sdk = ">=1.22.0,<2.0.0"
opentelemetry-instrumentation-fastapi = ">=0.43b0"
py-healthcheck = ">=1.10.0,<2.0.0"
psutil = ">=5.9.0,<7.0.0"

[tool.poetry.group.dev.dependencies]
pytest = ">=8.0.0,<9.0.0"
pytest-asyncio = ">=0.23.0,<0.27.0"
pytest-cov = ">=6.0.0,<7.0.0"
pytest-mock = ">=3.12.0,<4.0.0"
pytest-timeout = ">=2.2.0,<3.0.0"
pytest-xdist = ">=3.5.0,<4.0.0"
pytest-env = ">=1.1.0,<2.0.0"
pytest-httpx = ">=0.35.0,<0.36.0"
hypothesis = ">=6.100.0,<7.0.0"
behave = ">=1.2.6,<2.0.0"
networkx = ">=3.0,<4.0.0"
faker = ">=37.0.0,<38.0.0"
black = ">=24.0.0,<25.0.0"
isort = ">=5.13.0,<6.0.0"
flake8 = ">=7.0.0,<8.0.0"
mypy = ">=1.17.0,<2.0.0"
bandit = ">=1.7.5,<2.0.0"
pre-commit = ">=3.6.0,<4.0.0"
types-requests = ">=2.31.0,<3.0.0"
types-redis = ">=4.6.0,<5.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
line-length = 120
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit
    "N",   # pep8-naming
    "TID", # flake8-tidy-imports
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
]
ignore = [
    "S101",  # Use of assert detected
    "S104",  # Possible binding to all interfaces
    "B008",  # Do not perform function calls in argument defaults
]
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "test_env",
    "__pycache__",
    "tests",
    "migrations",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S105", "S106"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = ["agent_orchestrator/", "test_env/"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "alembic.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "docs.examples.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "examples.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "validate_extraction"
ignore_errors = true

[[tool.mypy.overrides]]
module = "app.core.config"
disable_error_code = ["unused-ignore"]

[[tool.mypy.overrides]]
module = "backups.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tools.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tools.pre_audit.reporting.*"
ignore_errors = true

# Override for external modules without stubs
[[tool.mypy.overrides]]
module = "celery.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "kombu.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "apscheduler.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "app.models.rbac.*"
ignore_missing_imports = true

# Temporary overrides for SQLAlchemy 1.x model compatibility issues
# These models use Column-based syntax that conflicts with Mapped-based mixins
[[tool.mypy.overrides]]
module = "app.models.user_role"
disable_error_code = ["assignment", "return-value", "no-any-return"]

[[tool.mypy.overrides]]
module = "app.models.role"
disable_error_code = ["assignment", "return-value", "no-any-return", "call-overload"]

[[tool.mypy.overrides]]
module = "app.models.permission"
disable_error_code = ["assignment", "return-value", "no-any-return", "index", "call-overload"]

[[tool.mypy.overrides]]
module = "app.models.oauth"
disable_error_code = ["return-value", "assignment"]

[[tool.mypy.overrides]]
module = "app.models.mfa"
disable_error_code = ["assignment", "return-value"]

# Repository and service files with SQLAlchemy compatibility issues
[[tool.mypy.overrides]]
module = "app.repositories.*"
disable_error_code = ["index", "attr-defined", "assignment", "arg-type", "call-arg", "operator", "return-value", "no-any-return", "union-attr", "misc", "override", "no-redef"]

[[tool.mypy.overrides]]
module = "app.services.*"
disable_error_code = ["assignment", "arg-type", "return-value", "call-overload", "no-any-return", "attr-defined", "index", "type-arg", "no-untyped-def", "call-arg", "union-attr", "truthy-function", "unreachable", "no-untyped-call"]

# Middleware files with async/typing complexity
[[tool.mypy.overrides]]
module = "app.middleware.*"
disable_error_code = ["no-untyped-def", "no-any-return", "return-value", "attr-defined", "no-untyped-call", "arg-type", "return", "override"]

# API endpoint files with response model complexity
[[tool.mypy.overrides]]
module = "app.api.endpoints.*"
disable_error_code = ["call-arg", "arg-type", "assignment", "attr-defined", "type-arg"]

# Core files with complex typing patterns
[[tool.mypy.overrides]]
module = "app.core.*"
disable_error_code = ["type-arg", "no-untyped-def", "assignment", "operator", "no-any-return", "return-value", "no-untyped-call", "arg-type", "attr-defined", "misc"]

# Database initialization files
[[tool.mypy.overrides]]
module = "app.db.*"
disable_error_code = ["attr-defined", "no-untyped-def", "no-untyped-call", "misc"]

# Celery files with external library typing limitations
[[tool.mypy.overrides]]
module = "app.celery.*"
disable_error_code = ["misc", "call-overload", "no-untyped-def"]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "test_env"]
skips = ["B101", "B601"]

# Removed [tool.pytest.ini_options] section to avoid conflicts with pytest.ini
# All pytest configuration is now centralized in pytest.ini

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true

[tool.black]
line-length = 120
target-version = ["py312"]
extend-exclude = '''
(
  \.md$
  | \.txt$
  | \.rst$
  | \.json$
  | \.yaml$
  | \.yml$
)
'''

[tool.isort]
profile = "black"
line_length = 120
