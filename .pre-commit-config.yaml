# Pre-commit hooks for code quality and security
# Install: pip install pre-commit && pre-commit install
default_language_version:
  python: python3.12

repos:
  # Code formatting - PSF maintained (matches CI)
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        language_version: python3.12
        # Using same args as CI: black --check --diff .
        args: ['--check', '--diff']

  # Import sorting - PyCQA maintained (matches CI)
  - repo: https://github.com/PyCQA/isort
    rev: 6.0.1
    hooks:
      - id: isort
        # Using same args as CI: isort --check-only --diff .
        # But need profile to match existing code style
        args: ['--check-only', '--diff', '--profile=black']

  # Critical linting only - matches CI exactly
  - repo: https://github.com/PyCQA/flake8
    rev: 7.3.0
    hooks:
      - id: flake8
        name: flake8-critical-errors
        # Exact match for CI: flake8 . --count --select=E9,F63,F7,F82,F841 --show-source --statistics
        args: ['--count', '--select=E9,F63,F7,F82,F841', '--show-source', '--statistics']
        # CI runs on all files including tests
        # No additional dependencies to match CI minimal setup

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.17.0
    hooks:
      - id: mypy
        args: ['--ignore-missing-imports', '--strict']
        exclude: '^(tests/|alembic/|backups/|docs/)'
        additional_dependencies:
          - types-requests
          - types-redis
          - types-passlib
          - types-bleach
          - types-psutil
          - types-PyYAML
          - pydantic
          - fastapi
          - starlette
          - redis
          - sqlalchemy
          - alembic

  # Security scanning - PyCQA maintained - COMPREHENSIVE COVERAGE
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        name: bandit-comprehensive
        args: ['-r', '.', '-ll', '--skip', 'B101,B601', '--exclude', '/venv/,/htmlcov/,/__pycache__/,/.git/,/.mypy_cache/,/backups/']
        exclude: '^(venv/|htmlcov/|__pycache__/|\.git/|\.mypy_cache/|backups/)'
        pass_filenames: false

  # Secret detection - Yelp maintained - ALL FILES
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: detect-secrets-comprehensive
        args: ['--baseline', '.secrets.baseline']
        exclude: '^(venv/|htmlcov/|__pycache__/|\.git/|\.mypy_cache/|backups/|tests/.*test_.*|.*_test\.py|package-lock\.json)'
        pass_filenames: false

  # YAML formatting - Using stable v3 instead of alpha
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types: [yaml]
        exclude: '.*\.ya?ml$'

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck

  # Dockerfile linting via Python wrapper
  - repo: https://github.com/AleksaC/hadolint-py
    rev: v2.12.1b3
    hooks:
      - id: hadolint

  # General file checks - pre-commit official
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: detect-private-key

  # Core unit tests - matches CI exactly
  - repo: local
    hooks:
      - id: unit-tests
        name: Core Unit Tests (stricter than CI)
        entry: python3 .pre-commit-pytest-runner.py
        language: system
        files: '\.(py)$'
        require_serial: true
        pass_filenames: false
        always_run: true

      - id: validate-yaml-ci
        name: Validate YAML (matches CI)
        entry: python3 -c "import subprocess, sys; subprocess.run(['pip', 'install', 'yamllint'], check=True, capture_output=True); result = subprocess.run(['yamllint', '-d', 'relaxed', '.github/workflows/ci.yml', '.github/workflows/pr-validation.yml'], capture_output=True); sys.exit(result.returncode)"
        language: system
        files: '\.github/workflows/.*\.yml$'
        pass_filenames: false

      - id: validate-json-ci
        name: Validate JSON (matches CI)
        entry: python3 -c "import json, sys, glob; files = glob.glob('**/*.json', recursive=True); [json.load(open(f)) for f in files]; print(f'Validated {len(files)} JSON files')"
        language: system
        files: '\.json$'
        pass_filenames: false

  # Custom hooks
  - repo: local
    hooks:
      - id: no-hardcoded-secrets
        name: Check for hardcoded secrets
        entry: python3 -c "import re, sys; patterns = [r'(?i)(api[_-]?key|api[_-]?secret|access[_-]?key|secret[_-]?key|client[_-]?secret|password|passwd|pwd)\s*[=:]\s*[\"\'`]([^\"\'`]+)[\"\'`]', r'(?i)bearer\s+[a-zA-Z0-9\-\._~\+\/]+=*', r'sk_live_[a-zA-Z0-9]+', r'xox[baprs]-[a-zA-Z0-9\-]+', r'ghp_[a-zA-Z0-9]{36}']; content = sys.stdin.read(); violations = []; [violations.extend(re.finditer(p, content, re.MULTILINE)) for p in patterns]; sys.exit(1 if violations else 0)"
        language: system
        files: '\.(py|js|ts|jsx|tsx|java|go|rb|php|yml|yaml|json|env|sh|bash)$'
        exclude: '(venv/|htmlcov/|__pycache__/|\.git/|\.mypy_cache/|backups/|\.example|\.template|test_|_test\.|spec_|_spec\.).*'

      - id: no-print-statements
        name: Check for print statements
        entry: python3 -c "import re, sys; content = sys.stdin.read(); sys.exit(1 if re.search(r'^\s*print\(', content, re.MULTILINE) else 0)"
        language: system
        types: [python]
        exclude: '(venv/|htmlcov/|__pycache__/|\.git/|\.mypy_cache/|backups/|test_|_test\.py|debug|scripts/)'

      - id: check-api-security
        name: Check API security patterns
        entry: python3 -c "import re, sys; patterns = [r'verify\s*=\s*False', r'debug\s*=\s*True', r'@app\.route.*methods\s*=\s*\[.*\*.*\]']; content = sys.stdin.read(); violations = []; [violations.extend(re.finditer(p, content, re.MULTILINE)) for p in patterns]; sys.exit(1 if violations else 0)"
        language: system
        types: [python]

      - id: ban-test-masking
        name: üö® Ban Dangerous Test Masking (|| true, etc.)  # ALLOW_MASK: Hook name reference
        entry: .github/scripts/ban-test-masking.py
        language: system
        files: '\.(yml|yaml|sh|bash|Makefile)$|^\.github/workflows/|^scripts/'
        args: ['--strict']
        pass_filenames: true

      - id: comprehensive-security-check
        name: üîç Comprehensive Security Check (ALL DIRS)
        entry: |
          python3 -c "
          import subprocess, sys, json, os
          print('üîç Running comprehensive security check across ALL directories...')
          print('üìÅ Scanning .github/ directory...')
          result = subprocess.run(['bandit', '-r', '.github/', '-f', 'json'], capture_output=True, text=True)
          if result.returncode != 0:
              if result.stdout:
                  try:
                      report = json.loads(result.stdout)
                      if report.get('results'):
                          print('‚ùå Security issues found in .github/ directory:')
                          for issue in report['results']:
                              print(f'   {issue[\"filename\"]}:{issue[\"line_number\"]}: {issue[\"issue_text\"]}')
                          sys.exit(1)
                  except: pass
              print('‚ùå Bandit scan failed on .github/ directory')
              sys.exit(1)
          print('‚úÖ .github/ directory security check passed')
          print('üìÅ Verifying no dangerous patterns in CI/CD files...')
          masking_result = subprocess.run(['python3', '.github/scripts/ban-test-masking.py', '--strict'], capture_output=True)
          if masking_result.returncode != 0:
              print('‚ùå Dangerous test masking patterns detected')
              sys.exit(1)
          print('‚úÖ No dangerous test masking patterns found')
          print('‚úÖ Comprehensive security check completed successfully')
          "
        language: system
        files: '\.(py|yml|yaml|sh|bash)$'
        exclude: '^(venv/|htmlcov/|__pycache__/|\.git/|\.mypy_cache/|backups/)'
        pass_filenames: false
        always_run: true

      - id: workflow-multi-layer-validation
        name: üîß Multi-Layer Workflow Validation
        entry: .github/scripts/validate-workflow-layers.py
        language: system
        files: '^\.github/workflows/.*\.ya?ml$'
        pass_filenames: false

      - id: workflow-execution-testing
        name: üß™ Workflow Execution Testing
        entry: .github/scripts/test-workflow-execution.py
        language: system
        files: '^\.github/workflows/.*\.ya?ml$'
        pass_filenames: false
